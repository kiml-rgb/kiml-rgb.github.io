<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2025-05-18T12:07:35.959Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第二章：数据结构与算法基础</title>
    <link href="https://kiml.github.io/posts/92102162/"/>
    <id>https://kiml.github.io/posts/92102162/</id>
    <published>2025-05-18T06:59:42.000Z</published>
    <updated>2025-05-18T12:07:35.959Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-05-18 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="基本概念与三要素">基本概念与三要素</h2><p>数据：数据是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。<strong>数据是计算机程序加工的原料</strong>。</p><p>数据元素、数据项：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由<strong>若干数据项</strong>组成，数据项是构成数据元素的不可分割的<strong>最小单位</strong>。</p><p>数据结构：是相互之间存在一种或多种<strong>特定关系</strong>d 的数据元素的集合。</p><p>三要素：逻辑结构、物理结构（存储结构）、数据的运算</p><h3 id="三要素-逻辑结构">三要素 - 逻辑结构</h3><p>集合：各个元素同属于一个集合，别无其它关系。</p><p>线性结构：数据元素之间时一对一的关系。除了第一个元素，所有的元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继。</p><p>树形结构：数据元素之间是一对多的关系。</p><p>图结构：数据元素之间是多对多的关系。</p><h3 id="三要素-物理结构">三要素 - 物理结构</h3><p>顺序结构：把逻辑上相邻的元素存储在屋里位置上也相邻的存储单元中</p><p>联是存储：逻辑上相邻的元素在物理位置上可以不相邻</p><p>索引存储：在存储元素信息的同时，还建立附加的索引表</p><p>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希存储</p><h2 id="算法">算法</h2><h3 id="五个特性">五个特性</h3><p>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。</p><p>确定性：算法中每条指令必须有确切的含义，对于<strong>相同的输入</strong>只能得出<strong>相同的输出</strong>。</p><p>可行性：算法中描述的操作都可以通过已经实现的<strong>基本运算执行有限次</strong>来实现。</p><p>输入：一个算法<strong>有零个或多个输入</strong>，这些输入取自于某个特定的对象的集合。</p><p>输出：一个算法有<strong>一个或多个输出</strong>，这些输出是与输入有着某种特定的关系的量。</p><h3 id="算法效率的度量">算法效率的度量</h3><p>时间复杂度：时间开销与问题规模 n 之间的关系</p><p>空间复杂度：空间开销（内存开销）与问题规模 n 之间的关系。</p><p><mark>递归调用带来的内存开销：S(n) = O(n) <strong>空间复杂度 = 递归调用的深度</strong></mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(1) &lt; O(log2n) &lt; O(n) &lt; O(nlog2n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</span><br></pre></td></tr></table></figure><h2 id="线性表">线性表</h2><h3 id="存储结构">存储结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|- 顺序表</span><br><span class="line">|- 链表 </span><br><span class="line">|-- 单链表</span><br><span class="line">|-- 循环链表</span><br><span class="line">|-- 双向链表</span><br></pre></td></tr></table></figure><table><thead><tr><th>性能类别</th><th>具体项目</th><th>顺序存储</th><th>链式存储</th></tr></thead><tbody><tr><td>空间性能</td><td>存储密度</td><td><strong>=1</strong></td><td>&lt;1</td></tr><tr><td></td><td>容量分配</td><td>事先确定</td><td><strong>动态改变</strong></td></tr><tr><td>时间性能</td><td>查找运算</td><td>O(n/2)</td><td>O(n/2)</td></tr><tr><td></td><td>读运算</td><td><strong>O(1)</strong></td><td>O([n + 1]/2)，最好情况为 1，最坏情况为 n</td></tr><tr><td></td><td>插入运算</td><td>O(n/2)，最好情况为 0，最坏情况为 n</td><td><strong>O(1)</strong></td></tr><tr><td></td><td>删除运算</td><td>([n - 1]/2)，</td><td><strong>O(1)</strong></td></tr></tbody></table><h2 id="其他">其他</h2><p>算法问题直接看之前的算法笔记。</p><blockquote><p>内链：[[面试-数据结构和算法]]<br>外链：<a class="link"   href="https://kiml.site/posts/1b906b1a/" >面试-数据结构和算法<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-05-18 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="软考" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%BD%AF%E8%80%83/"/>
    
    <category term="中级-软件设计师" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%BD%AF%E8%80%83/%E4%B8%AD%E7%BA%A7-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章：计算机系统知识</title>
    <link href="https://kiml.github.io/posts/3f3c39e1/"/>
    <id>https://kiml.github.io/posts/3f3c39e1/</id>
    <published>2025-05-18T06:58:47.000Z</published>
    <updated>2025-05-18T11:40:41.852Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-04-06 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="数值及其转换和数据的表示">数值及其转换和数据的表示</h2><p>二进制（B）、八进制（O）、十进制（D）、十六进制（H）</p><p>任意进制 -&gt; 十进制：位权展开</p><p>十进制 -&gt; 任意进制：短除法</p><p><mark>二进制 -&gt; 十六进制：4 位转 1 位</mark></p><table><thead><tr><th>2^12</th><th>2^11</th><th>2^10</th><th>2^9</th><th>2^8</th><th>2^7</th><th>2^6</th><th>2^5</th><th>2^4</th><th>2^3</th><th>2^2</th><th>2^1</th><th>2^0</th><th>2^-1</th><th>2^-2</th><th>2^-3</th></tr></thead><tbody><tr><td>4096</td><td>2048</td><td>1024</td><td>512</td><td>256</td><td>128</td><td>64</td><td>32</td><td>16</td><td>8</td><td>4</td><td>2</td><td>1</td><td>0.5</td><td>0.25</td><td>0.125</td></tr></tbody></table><h2 id="计算机内数据的表示">计算机内数据的表示</h2><h3 id="真值与机器数">真值与机器数</h3><p>真值：符合人类习惯的数字</p><p>机器数：各种数据在计算机中表示的形式称为机器数，其特点是数的符号用 0、1 表示。即<mark>正负号需要被“数字化”</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">机器数</span><br><span class="line">- 无符号数：无符号数表示正数，在机器数中没有符号位</span><br><span class="line">- 有符号数</span><br><span class="line">- 原码</span><br><span class="line">- 反码</span><br><span class="line">- 补码</span><br><span class="line">- 移码</span><br></pre></td></tr></table></figure><h3 id="原码">原码</h3><p><strong>原码</strong>：用数值部分表示真值的绝对值，符号位“0/1”对应“正/负”。</p><blockquote><p>若机器字长 n+1 位，<mark>原码整数</mark>的表示范围：<code>-(2^n -1) &lt;= x &lt;= 2^n -1</code>若机器字长 n+1 位，则数值部分（尾数）占 n 位，真值 0 有 <code>+0</code> 和 <code>-0</code> 两种形式。</p></blockquote><h3 id="反码">反码</h3><p><strong>反码</strong>：若符号位为 0，则反码与原码相同。若符号位为 1，则数值位全部取反。</p><blockquote><p>若机器字长 n+1 位，<mark>反码整数</mark>的表示范围：<code>-(2^n -1) &lt;= x &lt;= 2^n -1</code>真值 0 有 <code>+0</code> 和 <code>-0</code> 两种形式。</p></blockquote><h3 id="补码">补码</h3><p><strong>补码</strong>：若符号位为 0，则补码与原码相同。若符号位为 1，则补码=反码末位 +1。</p><blockquote><p>若机器字长 n+1 位，<mark>补码整数</mark>的表示范围：<code>-2^n &lt;= x &lt;= 2^n -1</code><br><strong>真值 0 只有一种形式</strong><code>00000000</code>。定点整数补码 <code>[x]补 = 10000000</code> 表示 <code>-2^7</code></p></blockquote><h3 id="移码">移码</h3><p><strong>移码</strong>：补码的基础上将符号位取反。注意：移码只能用于表示<strong>整数</strong>。</p><blockquote><p>若机器字长 n+1 位，<mark>补码整数</mark>的表示范围：<code>-2^n &lt;= x &lt;= 2^n -1</code></p></blockquote><h3 id="定点数-和-浮点数">定点数 和 浮点数</h3><p><strong>定点数</strong>：就是<strong>小数点的位置固定不变的数</strong>。小数点的位置通常有两种约定方式：定点整数（纯整数，小数点在最低有效数值位之后）和定点小数（纯小数，小数点在最高有效数值位之前）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5D - 0，01001.</span><br><span class="line">0.5D - 0.1000</span><br></pre></td></tr></table></figure><p><strong>浮点数</strong>：小数点位置不固定的数，他能表示更大范围的数。在浮点表示法中，阶码通常为带符号的纯整数，尾数为带符号的纯小数。<mark>浮点数通常表示为 <code>N=MR^E</code>。其中，M 称为尾数，R 称为基数，E 称为阶码。</mark></p><table><thead><tr><th>阶码（E）</th><th>码价</th><th>数符</th><th>尾数（M）</th></tr></thead></table><blockquote><p><strong>阶码</strong>，决定浮点数所能表示的<strong>数值范围</strong><br><strong>尾数</strong>， 决定浮点数所能表示的<strong>数值精度</strong></p></blockquote><h3 id="校验码">校验码</h3><p>校验码：用来检测传送的数据是否出错。</p><p>码距：指一个编码系统中任意两个合法编码之间至少有多少个二进制位不同。</p><h4 id="奇偶校验">奇偶校验</h4><p><strong>发现错误。</strong></p><h4 id="循环冗余校验码-CRC">循环冗余校验码 CRC</h4><p>应用于数据通信领域和磁介质存储系统中。长度 k（数据位） + r（校验位）</p><h4 id="海明码"><mark>海明码</mark></h4><p>海明码的构成方法是：在数据位之间插入 k 个校验码，通过扩大码距来实现<strong>检错</strong>和<strong>纠错</strong>。</p><blockquote><p>设数据位是 n 位，校验位是 k 位，则 n 和 k 必须满足以下关系：<br><code>2^k -1 &gt;= n+k</code></p></blockquote><h2 id="计算机系统组成">计算机系统组成</h2><h3 id="五大部件">五大部件</h3><blockquote><p>输入设备、输出设备、存储器、运算器、控制器。输入/输出设备与存储器之间的数据传输通过运算器完成。</p></blockquote><p>冯·诺依曼计算机的特点：</p><ol><li class="lvl-3"><p>计算机由五大部件组成（输入设备、输出设备、存储器、运算器、控制器）</p></li><li class="lvl-3"><p>指令和数据以同等地位存于存储器，可按地址寻访</p></li><li class="lvl-3"><p>指令和数据用二进制表示</p></li><li class="lvl-3"><p>指令由操作码和地址码组成</p></li><li class="lvl-3"><p>存储程序</p></li><li class="lvl-3"><p>以运算器为中心</p></li></ol><p>输入设备：将信息转换为机器能识别的形式 0/1</p><p>输出设备：将结果转换为人们熟知的形式</p><p>主存储器：存放数据和程序</p><p>运算器：算术运算、逻辑运算</p><p>控制器：指挥各部件、使程序得以运行</p><h3 id="主存储器">主存储器</h3><blockquote><p>存储体、MAR、MDR</p></blockquote><p>存储单元：每个存储单元存放一串二进制代码。</p><p>存储字：存储单元中二进制代码的组合。</p><p>存储字长：存储单元中二进制代码的位数。</p><p>存储元：即存储二进制的电子元件，每个存储元可存 1 bit。</p><p>MAR：地址寄存器（标记存储单元的个数）</p><p>MDR：数据寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAR = 4位 -&gt; 总共有 2*2*2*2 个存储单元</span><br><span class="line">MDR = 16位 -&gt; 每个存储单元可存放 16 bit</span><br></pre></td></tr></table></figure><h3 id="CPU-运算器">CPU - 运算器</h3><p>运算器：用于实现算术运算（如：加减乘除）、逻辑运算（如：与或非）</p><p>ACC：累加器，用于存放操作数，或运算结果。</p><p>MQ：乘商寄存器，在乘、除运算时，用于存放操作数或结果运算。</p><p>X：通用的操作数寄存器，用于存放操作数。</p><p><strong>ALU：算术逻辑单元</strong>，通过内部复杂的电路实现算术运算、逻辑运算。</p><p>DR：数据缓存寄存器。</p><p>PSW：状态条件寄存器，用来保存指令运行标志。</p><h3 id="CPU-控制器">CPU - 控制器</h3><p>CU：控制单元，分析指令，给出控制信号。</p><p>IR：指令寄存器，存放<strong>当前执行的指令</strong>。</p><p>PC：程序计数器，存放<strong>下一条指令地址</strong>，有<strong>自动加 1</strong>功能。</p><p>AR：地址寄存器，保存当前 CPU 所访问的内存单元地址。</p><p>ID：指令译码器，对操作码进行分析。</p><h2 id="计算机体系结构">计算机体系结构</h2><h3 id="Flynn-分类法">Flynn 分类法</h3><table><thead><tr><th>体系结构类型</th><th>结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td>单指令流单数据流 SISD</td><td>控制部分：一个<br>处理器：一个<br>主存模块：一个</td><td></td><td>单处理器系统</td></tr><tr><td>单指令流多数据流 SIMD</td><td>控制部分：一个<br>处理器：多个<br>主存模块：多个</td><td>各处理器以异步的形式执行同一条指令</td><td>并行处理机<br>阵列处理机<br>超级向量处理机</td></tr><tr><td>多指令流单数据流 MISD</td><td>控制部分：多个<br>处理器：一个<br>主存模块：多个</td><td><strong>被证明不可能，至少是不实际</strong></td><td>目前没有，有文献称流水计算机为此类</td></tr><tr><td>多指令流多数据流 MIMD</td><td>控制部分：多个<br>处理器：多个<br>主存模块：多个</td><td>能够实现作业、任务、指令等各级全面屏行</td><td>多处理机系统<br>多计算机</td></tr></tbody></table><h2 id="指令系统">指令系统</h2><h3 id="指令">指令</h3><p>指令（又称机器指令）：是指令计算机执行某种操作的命令，是计算机运行的最小功能单位。</p><p>一台计算机的所有指令的集合构成该机的<strong>指令系统</strong>，也称为指令集。</p><h3 id="指令格式">指令格式</h3><p>一条指令就是机器语言的一个语句，它是一组<strong>有意义</strong>的二进制代码。</p><p>一条指令通常要包括<strong>操作码字段</strong>（操作的类型）和<strong>地址码字段</strong>（操作数及运算结果存放的地址）两部分。</p><h3 id="七种寻址方式">七种寻址方式</h3><ul class="lvl-0"><li class="lvl-2"><p>立即寻址：操作数作为指令的一部分直接写在指令中，这种操作数称为立即数。</p></li><li class="lvl-2"><p>寄存器寻址：指令所要的操作数已存储在某寄存器中，或把目标操作数存入寄存器。</p></li><li class="lvl-2"><p>直接寻址：指令所要的操作数存放在内存中，在指令中直接给出该操作数的有效地址。</p></li><li class="lvl-2"><p>寄存器间接寻址：操作数在存储器中，操作数的有效地址用 SI、DI、BX 和 BP 四个寄存器之一来制定。</p></li><li class="lvl-2"><p>寄存器相对寻址：操作数在存储器中，其有效地址是一个基址寄存器或变址寄存器中的内容和指令中的 8 位/16 位偏移量之和。</p></li><li class="lvl-2"><p>基址加变址寻址方式：操作数在存储器中，其有效地址是一个基址寄存器和一个变址寄存器的内容之和。</p></li><li class="lvl-2"><p>相对基址加变址寻址：操作数在存储器中，其有效地址是一个基址寄存器的值、一个变址寄存器的值和指令中的 8 位/16 位偏移量之和。</p></li></ul><h3 id="复杂指令集计算机-CISC、精简指令集计算机-RISC">复杂指令集计算机 - CISC、精简指令集计算机 - RISC</h3><table><thead><tr><th></th><th>CISC（Complex）</th><th>RISC（Reduced）</th></tr></thead><tbody><tr><td>指令系统</td><td>复杂、庞大</td><td>简单、精简</td></tr><tr><td>指令数目</td><td>一般大于 200 条</td><td>一般小于 100 条</td></tr><tr><td>指令字长</td><td>不固定</td><td>定长</td></tr><tr><td>可访存指令</td><td>不加限制</td><td>只有 Load/Store 指令</td></tr><tr><td>各种指令执行时间</td><td>相差较大</td><td>绝大多数一个周期内完成</td></tr><tr><td>各种指令使用频度</td><td>相差较大</td><td>都比较常用</td></tr><tr><td>通用寄存器数量</td><td>较少</td><td>多</td></tr><tr><td>控制方式</td><td>绝大多数为微程序控制</td><td>绝大多数为组合逻辑控制</td></tr><tr><td>指令流水线</td><td>可以通过一定方式实现</td><td>必须实现</td></tr></tbody></table><h3 id="指令的流水处理">指令的流水处理</h3><p>指令控制方式有顺序方式、重叠方式和流水方式三种。</p><h4 id="流水线的计算"><strong>流水线的计算</strong></h4><blockquote><p>列：若指令流水线把一条指令分为取指、分析和执行三部分，且三部分的时间分别是取指 2ns，分析 2ns，执行 1ns。那么，流水线周期是多少？100 条指令全部执行完毕需要的时间是多少？</p></blockquote><p><strong>流水线周期为执行时间最长的一段</strong></p><p>流水线计算公式为：<em><em>1 条指令执行时间 +（指令条数 -1）</em> 流水线周期</em>*</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">流水线周期：2ns</span><br><span class="line">时间：2ns + 2ns + 1ns + (100 - 1) * 2ns = 103 ns</span><br></pre></td></tr></table></figure><p><strong>流水线的吞吐率（TP）</strong>：是指在单位时间内流水线所完成的任务数量或输出的结果数量。计算公式：<strong>TP=指令条数/流水线执行时间</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TP = 100 / [2ns + 2ns + 1ns + (100 - 1) * 2ns] = 100 / 103</span><br></pre></td></tr></table></figure><p><strong>流水线的加速比</strong>：完成同样一批任务，不使用流水线所用的时间与使用流水线所用的时间之比。计算公式：<strong>S=不使用流水线执行时间/使用流水线执行时间</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = (2ns + 2ns + 1ns) * 100 / [2ns + 2ns + 1ns + (100 - 1) * 2ns] = 500 / 103</span><br></pre></td></tr></table></figure><h3 id="输入输出技术">输入输出技术</h3><h4 id="CPU-与外设之间的数据传输方式">CPU 与外设之间的数据传输方式</h4><ol><li class="lvl-3"><p>直接程序控制方式直接程序控制方式是指在完成数据的输入/输出中，整个输入/输出的过程是<strong>在 CPU 执行程序的控制下完成的</strong>。这种方式还可以分为以下两种：</p><ol><li class="lvl-7">无条件传输方式：无条件地与 CPU 交换数据。</li><li class="lvl-7">程序查询方式：先通过 CPU 查询外设状态，准备好之后再与 CPU 交换数据。</li></ol></li><li class="lvl-3"><p>中断方式中断方式利用中断机制，使 I/O 系统在与外设交换数据时，<strong>CPU 无须等待，也不必查询 I/O 状态</strong>，即可以抽身出来处理其他任务，因此提高了系统效率。</p></li><li class="lvl-3"><p>直接存储器存取方式（<strong>DMA</strong>）是在存储器与 I/O 设备间直接传送数据，即在内存与 I/O 设备之间传送一个数据块的过程中，不需要 CPU 的任何干涉，是一种<strong>完全由 DMA 硬件完成</strong> I/O 操作的方式。</p></li><li class="lvl-3"><p>输入/输出处理机（<strong>IOP</strong>）是一个专用处理机，用于完成主机的输入/输出操作。IOP 根据主机的 I/O 命令，完成对外设数据的输入/输出。</p></li></ol><h2 id="存储系统">存储系统</h2><h3 id="层次结构">层次结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CPU</span><br><span class="line">高速缓存（Cache）-辅助硬件</span><br><span class="line">主存-辅助硬件/软件</span><br><span class="line">辅存</span><br></pre></td></tr></table></figure><p>主存 - 辅存（硬件 + 操作系统）：实现虚拟系统存储，<strong>解决了主存容量不够的问题</strong></p><p>Cache - 主存（硬件自动完成）：解决了<strong>主存与 CPU 速度不匹配的问题</strong></p><h3 id="分类">分类</h3><ol><li class="lvl-3"><p>按位置分类：可以分为内存和外存内存（主存）：用来存储当前运行所需要的程序和数据，速度快、容量小。外存（辅存）：用来存储当前不参与运行的数据，容量大，速度慢。</p></li><li class="lvl-3"><p>按材料分类，可分为磁存储器、半导体存储器和光存储器。磁存储器：用磁性介质做成，如磁芯、磁泡、磁盘、磁带等半导体存储器：根据所用元件又可分为双极型和 MOS 型两类；根据是否需要刷新又可分为静态和动态两类。光存储器：由光学、电学和机械部件等组成，如光盘存储器。</p></li><li class="lvl-3"><p>按工作方式分，可分为读/写存储器和只读存储器。读/写存储器（RAM）它指既能读取数据也能存入数据的存储器。只读存储器（ROM）工作过程中仅能读取的存储器。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>固定只读存储器（ROM）。这种存储器是在厂家生产时就写好数据的，其内容只能读出，不能改变。一般用于存放<strong>系统程序 BIOS</strong>和用于<strong>微程序控制</strong>。</p></li><li class="lvl-2"><p>可编程的只读存储器（PROM）。其中的内容可以由用户<strong>一次性地写入</strong>，写入后<strong>不能再修改</strong>。</p></li><li class="lvl-2"><p>可擦除可编程的的只读存储器（EPROM）。其中的内容既可以读出，也可以由用户写入，写入后还可以修改，<strong>紫外线照射擦除信息</strong>。</p></li><li class="lvl-2"><p>电擦除可编程的的只读存储器（EEPROM）。与 EPROM 相似，EEPROM 中的内容既可以读出，也可以进行改写，<strong>电擦除</strong>的方法进行数据的改写。</p></li><li class="lvl-2"><p>闪存存储器（Flash Memory）。简称闪存，闪存的特性介于 EPROM 和 EEPROM 之间，类似于 EEPROM，也可以使用电信号进行信息的擦除操作。整块闪存可以在数秒内删除，<strong>速度远快于 EPROM</strong>。</p></li></ul><h3 id="高速缓存-Cache">高速缓存 -Cache</h3><p>高速缓存（Cache）是位于 CPU 和主存之间的高速存储子系统。</p><p>目的：提高存储器的平均访问速度，使存储器的速度与 CPU 的速度相匹配。</p><p>地址变换和数据块的替换算法均由硬件实现。</p><p>通常被集成到 CPU 内，以提高访问速度，其主要特点是容量小、速度快、成本高。</p><h4 id="Cache-的组成">Cache 的组成</h4><ol><li class="lvl-3"><p>Cache 存储器部分：用来存放<strong>主存的部分复制信息</strong>。</p></li><li class="lvl-3"><p>控制部分的功能：判断 CPU 要访问的信息是否在 Cache 存储器中，若在，即为命中，若不在则没有命中。</p></li></ol><h4 id="Cache-的三种地址映射">Cache 的三种地址映射</h4><p>地址映像：把<strong>主存中的地址映射成 Cache 存储器中的地址</strong></p><ol><li class="lvl-3"><p>直接映射：就是主存的块与 Cache 中块的对应关系是固定的。主存中的块只能存放在 Cache 存储器的相同块号中。因此，只要主存地址中的主存区号与 Cache 中的主存区号相同，则表明访问 Cache 命中。优点：<strong>地址变换很简单</strong>，缺点：<strong>灵活性差</strong>。Cache 分块，主存分区，每个区再分块，并且每个区的块数和 Cache 的分块相同。</p></li><li class="lvl-3"><p>全相联映像：允许主存中的任一块可以调入 Cache 的任一块的空间。在地址变换时，将主存地址高位表示的主存块号与 Cache 中的主存块号进行比较，若相同则为命中。优点：主存的块调入 Cache 的位置<strong>不受限制，十分灵活</strong>。其缺点是无法从主存块号中获得 Cache 的块号，<strong>变换比较复杂，速度比较慢</strong></p></li><li class="lvl-3"><p>组相联映像：这种方式是前面两种方式的折中。具体方法是将 Cache 先分成组再分块。组组相联映像就是<strong>组间采用直接映像方式</strong>，而<strong>组内的块采用全相联映像方式</strong>。</p></li></ol><h4 id="Cache-的性能分析">Cache 的性能分析</h4><blockquote><p>若 H 为 Cache 的命中率，tc 为 Cache 的存取时间，tm 为主存的访问时间，则 Cache 的等效访问时间 ta 为</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ta = H * tc + (1 - H) * tm</span><br></pre></td></tr></table></figure><p>使用 Cache 比不使用 Cache 的 CPU 访问存储器速度提高的倍数 r 可以用下式求得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = tm / ta</span><br></pre></td></tr></table></figure><h3 id="主存的扩展">主存的扩展</h3><p>位扩展</p><p>字扩展</p><h3 id="主存的编址">主存的编址</h3><blockquote><p>内存地址从 AC000H 到 C7FFFH，共有 ？K 个地址单元，如果该内存地址按字（16bit）编址，由 28 片存储器芯片构成。已知构成此内存的芯片每片有 16K 个存储单元，则该芯片每个存储单元存储 ？位。<br>1K=2^10<br>1M=2^20<br>1G=2^30</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C7FFFH - AC000H + 1 </span><br><span class="line">= 1C000H </span><br><span class="line">= 1 * 2^4^4 + 12 * 2^4^3 </span><br><span class="line">= (2^4 + 12)*2^12</span><br><span class="line">= 28 * 2^12</span><br><span class="line"></span><br><span class="line">地址单元 = 28 * 2^12 / 2^10 = 28 * 2^2 = 112 K</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">112K * 16 = 28 * 16K * 存储位数</span><br><span class="line">存储位数 = 4 bit</span><br></pre></td></tr></table></figure><h3 id="虚拟存储器">虚拟存储器</h3><p>虚拟存储器是由主存、辅存、存储管理单元及操作系统中的存储管理软件组成的存储系统。程序员使用该存储系统时，可以使用的内存空间可远大于主存的物理空间，但实际上并不存在那么大的主存，顾称其为虚拟存储器。</p><p>虚拟存储器使存储系<strong>统既具有相当于外存的容量</strong>又<strong>具有接近于主存的访问速度</strong>。</p><h3 id="磁盘存储器">磁盘存储器</h3><p>存取时间 = 寻道时间 + 等待时间（平均定位时间 + 转动延迟）</p><p>注意：寻道时间是指磁头移动到磁道所需的时间；等待时间为等待读写的扇区转到磁头下方所用的时间。</p><h2 id="总线系统">总线系统</h2><ol><li class="lvl-3"><p>片内总线（内部总线）片内总线是芯片内部的总线。它是 CPU 芯片内部寄存器与寄存器之间、寄存器与 ALU 之间的公共连接线。</p></li><li class="lvl-3"><p>系统总线系统总线是计算机系统内各功能部件（CPU、主存、I/O 接口）之间相互连接的总线。按系统总线<strong>传输信息内容的不同</strong>，又可以分为 3 类：<strong>数据总线、地址总线和控制总线</strong>。</p></li><li class="lvl-3"><p>通信总线（外部总线）用于设备一级的互连，计算机可通过该总线和其他设备进行信息与数据交换。</p></li></ol><h2 id="磁盘阵列技术（RAID）">磁盘阵列技术（RAID）</h2><p>磁盘阵列由多台磁盘存储器组成，是快速、大容量且高可靠的外存子系统。现在常见的独立冗余磁盘阵列（RAID）就是一种由多块独立磁盘构成的冗余阵列。RAID 技术分为几种不同的等级，分别可以提供不同的速度、安全性和性价比。</p><table><thead><tr><th>RAID 级</th><th>说明</th></tr></thead><tbody><tr><td>RAID-0</td><td>一种不具备容错能力的磁盘阵列</td></tr><tr><td>RAID-1</td><td>是采用镜像容错技术改善可靠性的一种磁盘阵列</td></tr><tr><td>RAID-2</td><td>是采用海明码进行错误检测的一种磁盘阵列</td></tr><tr><td>RAID-3</td><td>减少了用于检验的磁盘存储器台数，从而提高了磁盘阵列的有效容量，一般只有一个检验盘</td></tr><tr><td>RAID-4</td><td>是一种可以独立地对组内各磁盘进行读写的磁盘阵列，该阵列也只用一个检验盘</td></tr><tr><td>RAID-5</td><td>是对 RAID-4 的一种改进，他不设置专门的检验盘。同一台磁盘上既记录数据，也记录检测信息。这就解决了前面多台磁盘机争用一台检验盘的问题</td></tr><tr><td>RAID-6</td><td>采用两级数据冗余和新的数据编码以解决数据恢复问题，在两个磁盘出现故障时仍然能够正常工作。在进行写操作时，分别进行两个独立的校验运算，形成两个独立的冗余数据，并写入两个不同的磁盘。</td></tr></tbody></table><h2 id="计算机可靠性">计算机可靠性</h2><p>计算机系统的可靠性是指从它开始运行（t=0）到某个时刻 t 这段时间内能正常运行的概率，用 R(t) 表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">串联部件的可靠度 = 各部件的可靠度的乘积</span><br><span class="line">串联部件的可靠度 = 1 - 各部件失效率的乘积</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-04-06 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="软考" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%BD%AF%E8%80%83/"/>
    
    <category term="中级-软件设计师" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E8%BD%AF%E8%80%83/%E4%B8%AD%E7%BA%A7-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88/"/>
    
    
    <category term="软考中级" scheme="https://kiml.github.io/tags/%E8%BD%AF%E8%80%83%E4%B8%AD%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube 与 GitLab 集成（二）</title>
    <link href="https://kiml.github.io/posts/6041b6ab/"/>
    <id>https://kiml.github.io/posts/6041b6ab/</id>
    <published>2025-04-11T06:24:36.000Z</published>
    <updated>2025-05-18T11:40:41.849Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>sonar 脚本之前一直在测试分支上跑，虽然有每次构建拉取事件很长的毛病，但影响不大还能忍受。最近把 sonar 上到 master 环境中，出现了大问题。。。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-04-11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><ol><li class="lvl-3"><p>gitlab CI cancel 之后，后台 maven 子进程并没有被杀死，导致第二个 runner 服务依旧处于 pedding 状态。前台多次操作 cancel 并重启后，服务器资源直接耗尽，需要重启 sonar 所在的服务器才行。<mark>未解决</mark>（加了每次服务启动前关闭别的扫描服务，好像并没有什么用）</p></li><li class="lvl-3"><p>虽然之前添加了插件，但是没有使用 sonar 的 PR/MR 扫描模式，每次都是全量进行扫描，并且加上了 merge 阻断，导致每次都需要 merge 前等待，耗时较久。<mark>已解决</mark></p></li><li class="lvl-3"><p>sonar 的 webhook 要转发到飞书，之前偷懒没有写一个服务进行转发，导致卡片样式比较难看。<mark>已解决</mark></p></li></ol><h3 id="PR-MR-扫描模式">PR/MR 扫描模式</h3><blockquote><p>添加了这种扫描模式之后，由于新代码是与 master 分支进行比较，需要写一个定时的 ci 对 master 分支进行全量的扫描</p></blockquote><h4 id="gitlab-ci-yml"><code>.gitlab-ci.yml</code></h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonarqube</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">noop</span>  </span><br><span class="line"><span class="attr">sonarqube-check:</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonarqube</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">variables:</span>  </span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">&quot;$&#123;CI_PROJECT_DIR&#125;/.sonar&quot;</span>  <span class="comment"># Defines the location of the analysis task cache  </span></span><br><span class="line">    <span class="attr">GIT_DEPTH:</span> <span class="string">&quot;0&quot;</span>  <span class="comment"># Tells git to fetch all the branches of the project, required by the analysis task  </span></span><br><span class="line">  <span class="attr">cache:</span>  </span><br><span class="line">    <span class="attr">key:</span> <span class="string">sonar-cache</span>  </span><br><span class="line">    <span class="attr">paths:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar/cache</span>  </span><br><span class="line">  <span class="attr">before_script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;检查并终止之前的 Maven 进程...&quot;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">|  </span></span><br><span class="line"><span class="string">      # 查找并终止之前的 Maven 进程  </span></span><br><span class="line"><span class="string">      maven_pids=$(pgrep -f &quot;gitlab_sonarci_run&quot; || true)  </span></span><br><span class="line"><span class="string">      if [ -n &quot;$maven_pids&quot; ]; then  </span></span><br><span class="line"><span class="string">          echo &quot;发现之前的 Maven 进程，正在终止...&quot;  </span></span><br><span class="line"><span class="string">          echo &quot;$maven_pids&quot; | xargs kill -TERM || true  </span></span><br><span class="line"><span class="string">          echo &quot;$maven_pids &quot; | xargs wait || true  </span></span><br><span class="line"><span class="string">      else  </span></span><br><span class="line"><span class="string">          echo &quot;未发现之前的 Maven 进程。&quot;  </span></span><br><span class="line"><span class="string">      fi  </span></span><br><span class="line"><span class="string"></span>  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">JAVA_HOME=你的服务地址</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">JAVA_HOME</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">SONAR_JAVA_OPTS=&quot;-Xmx2G</span> <span class="string">-Xms1G&quot;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">|  </span></span><br><span class="line"><span class="string">      echo &quot;启动 SonarQube 分析...&quot;  </span></span><br><span class="line"><span class="string">      run_scan() &#123;  </span></span><br><span class="line"><span class="string">        mvn verify sonar:sonar -T 2 \  </span></span><br><span class="line"><span class="string">        -Dsonar.projectKey=你的key \  </span></span><br><span class="line"><span class="string">        # 这部分数据会在 merge_request_event 时由 gitlab 进行填充</span></span><br><span class="line"><span class="string">        -Dsonar.pullrequest.key=$CI_MERGE_REQUEST_IID \  </span></span><br><span class="line"><span class="string">        -Dsonar.pullrequest.branch=$CI_COMMIT_REF_NAME \  </span></span><br><span class="line"><span class="string">        -Dsonar.pullrequest.base=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME \  </span></span><br><span class="line"><span class="string">        -Dmaven.test.skip=true \  </span></span><br><span class="line"><span class="string">        -Dsonar.qualitygate.wait=true \  </span></span><br><span class="line"><span class="string">        -Dsonar.ce.parallel=1 \  </span></span><br><span class="line"><span class="string">        -Dmaven.repo.local=你的本地仓库 \  </span></span><br><span class="line"><span class="string">        -s 你的maven配置地址 \  </span></span><br><span class="line"><span class="string">        -Dci.tag=gitlab_sonarci_run &amp;  </span></span><br><span class="line"><span class="string">      &#125;  </span></span><br><span class="line"><span class="string">      run_scan  </span></span><br><span class="line"><span class="string"></span>  <span class="attr">allow_failure:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="comment"># 如果 SKIP_SONAR 为 &quot;true&quot;，跳过任务  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$SKIP_SONAR == &quot;true&quot;&#x27;</span>  </span><br><span class="line">      <span class="attr">when:</span> <span class="string">never</span>  </span><br><span class="line">    <span class="comment"># 在合并请求时触发  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot; &amp;&amp; $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &quot;master&quot;&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">noop:</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">noop</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Pipeline skipped all main jobs.&quot;</span>  </span><br><span class="line">  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="comment"># 在合并请求时触发  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot; &amp;&amp; $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &quot;master&quot;&#x27;</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">sonarqube-master-daily:</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonarqube</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">JAVA_HOME=你的服务地址</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">JAVA_HOME</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">SONAR_JAVA_OPTS=&quot;-Xmx2G</span> <span class="string">-Xms1G&quot;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">|  </span></span><br><span class="line"><span class="string">      echo &quot;启动 SonarQube 分析...&quot;  </span></span><br><span class="line"><span class="string">      run_scan() &#123;  </span></span><br><span class="line"><span class="string">        mvn verify sonar:sonar -T 2 \  </span></span><br><span class="line"><span class="string">        -Dsonar.projectKey=你的key \  </span></span><br><span class="line"><span class="string">        -Dsonar.branch.name=master \  </span></span><br><span class="line"><span class="string">        -Dmaven.test.skip=true \  </span></span><br><span class="line"><span class="string">        -Dsonar.qualitygate.wait=true \  </span></span><br><span class="line"><span class="string">        -Dsonar.ce.parallel=1 \  </span></span><br><span class="line"><span class="string">        -Dmaven.repo.local=你的仓库地址 \  </span></span><br><span class="line"><span class="string">        -s 你的maven配置文件地址 \  </span></span><br><span class="line"><span class="string">        -Dci.tag=gitlab_sonarci_run &amp;  </span></span><br><span class="line"><span class="string">      &#125;  </span></span><br><span class="line"><span class="string">      run_scan  </span></span><br><span class="line"><span class="string"></span>  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_COMMIT_BRANCH == &quot;master&quot; &amp;&amp; $CI_PIPELINE_SOURCE == &quot;schedule&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="定时-ci-添加">定时 ci 添加</h4><blockquote><p>gitlab 定时 CI 会去扫 master 下的 <code>.gitlab-ci.yml</code> 文件，</p></blockquote><h3 id="webhook-转发">webhook 转发</h3><blockquote><p>node.js 代码地址：<a class="link"   href="https://github.com/kiml-rgb/sonar-feishu-webhook.git" >https://github.com/kiml-rgb/sonar-feishu-webhook.git<i class="fas fa-external-link-alt"></i></a></p></blockquote><ol><li class="lvl-3"><p><strong>创建一个中间服务</strong>（建议使用 Spring Boot 或 Node.js）监听 SonarQube Webhook。</p></li><li class="lvl-3"><p>接收到 Webhook 后，解析 payload，构造上面的卡片格式 JSON。</p></li><li class="lvl-3"><p><strong>将卡片格式消息 POST 到飞书机器人地址</strong></p></li></ol><h4 id="项目结构">项目结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sonar-feishu-webhook/</span><br><span class="line">├── app.js</span><br><span class="line">├── feishu.js</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── package.json</span><br><span class="line">└── .env</span><br></pre></td></tr></table></figure><h4 id="部署">部署</h4><ol><li class="lvl-3"><p>项目文件准备</p></li><li class="lvl-3"><p>构建镜像</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t sonar-webhook-feishu .</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>运行容器</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name sonar-feishu \</span><br><span class="line">  -p 9999:3000 \</span><br><span class="line">  --env-file .env \</span><br><span class="line">sonar-webhook-feishu</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>在 SonarQube 后台 Webhook 中配置</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">your-address/webhook/sonar</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;sonar 脚本之前一直在测试分支上跑，虽然有每次构建拉取事件很长的毛病，但影响不大还能忍受。最近把 sonar 上到 master 环境中，出现了大问题。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-04-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="GitLab" scheme="https://kiml.github.io/tags/GitLab/"/>
    
    <category term="SonarQube" scheme="https://kiml.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>Let’s Encrypt 免费申请泛域名 SSL 证书，并实现自动续期</title>
    <link href="https://kiml.github.io/posts/a1d28c6/"/>
    <id>https://kiml.github.io/posts/a1d28c6/</id>
    <published>2025-04-07T10:10:18.000Z</published>
    <updated>2025-05-18T11:40:41.849Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>参考文章：<a class="link"   href="https://www.cnblogs.com/michaelshen/p/18538178" >使用 Let’s Encrypt 免费申请泛域名 SSL 证书，并实现自动续期<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-04-07 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="环境准备">环境准备</h2><ul class="lvl-0"><li class="lvl-2"><p>一台可以访问互联网的服务器（Linux 环境，如 Ubuntu/CentOS）。</p></li><li class="lvl-2"><p><strong>Root</strong> 权限或 <code>sudo</code> 权限。</p></li><li class="lvl-2"><p>一个已解析的域名（本文以 <code>example.com</code> 为例）。</p></li></ul><h2 id="Certbot-自动安装"><a class="link"   href="https://certbot.eff.org/" >Certbot<i class="fas fa-external-link-alt"></i></a> 自动安装</h2><ol><li class="lvl-3"><p>选择安装环境<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z25/04/Snipaste_2025-04-07_18-18-56.png"                        alt=""                 ></p></li><li class="lvl-3"><p>Install system dependencies<br>For APT-based distributions (e.g. Debian, Ubuntu …):</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3 python3-venv libaugeas0</span><br></pre></td></tr></table></figure><p>For RPM-based distributions (e.g. Fedora, CentOS …):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install python3 augeas-libs</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>Remove certbot-auto and any Certbot OS packages</p></li><li class="lvl-3"><p>Set up a Python virtual environment</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo python3 -m venv /opt/certbot/</span><br><span class="line">sudo /opt/certbot/bin/pip install --upgrade pip</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>Install Certbot</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /opt/certbot/bin/pip install certbot certbot-nginx</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>Prepare the Certbot command</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /opt/certbot/bin/certbot /usr/bin/certbot</span><br></pre></td></tr></table></figure><h2 id="申请单域名-SSL-证书">申请单域名 SSL 证书</h2><ol><li class="lvl-3"><p>Choose how you’d like to run Certbot</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">手动配置 nginx</span></span><br><span class="line">sudo certbot certonly --nginx</span><br></pre></td></tr></table></figure><blockquote><p>这里获取 nginx 默认的配置位置在 /etc/nginx。可以为自己安装完成的 nginx 创建软链到此目录下</p></blockquote><ol start="2"><li class="lvl-3"><p>sudo certbot certonly --nginx</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;0 0,12 * * * root /opt/certbot/bin/python -c &#x27;import random; import time; time.sleep(random.random() * 3600)&#x27; &amp;&amp; sudo certbot renew -q&quot; | sudo tee -a /etc/crontab &gt; /dev/null</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>Confirm that Certbot worked</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/michaelshen/p/18538178&quot; &gt;使用 Let’s Encrypt 免费申请泛域名 SSL 证书，并实现自动续期&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-04-07 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>【代码模板】Nginx</title>
    <link href="https://kiml.github.io/posts/bc551f67/"/>
    <id>https://kiml.github.io/posts/bc551f67/</id>
    <published>2025-03-24T08:23:03.000Z</published>
    <updated>2025-05-18T11:40:41.582Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Nginx 常用模板</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-03-24 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="简单项目模板">简单项目模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">user root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    client_max_body_size 500M;</span><br><span class="line">    # HTTP server block, redirect to HTTPS 此部分内容可以由证书网站生成</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  sxqxyyl.cn www.sxqxyyl.cn;</span><br><span class="line"></span><br><span class="line">        # Redirect HTTP to HTTPS</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # HTTPS server block</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  sxqxyyl.cn www.sxqxyyl.cn;</span><br><span class="line"></span><br><span class="line">        # SSL certificate and key</span><br><span class="line">        # SSL 相关内容可以由证书网站生成</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root  /root/frontend/dist;</span><br><span class="line">            index   index.html index.htm;  # 确保这是您的网站根目录</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"># 前端访问路径配置为 /api</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            rewrite ^/api/(.*)$ /$1 break;  # 确保路径被重写为后端应用需要的格式</span><br><span class="line">            proxy_pass http://127.0.0.1:8888/;  # 将请求转发到后端服务</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /minio/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:9000/;  # MinIO 运行在 HTTP 9000 端口</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # Error pages for 500, 502, 503, 504</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root  /root/frontend/dist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;Nginx 常用模板&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-03-24 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Nginx" scheme="https://kiml.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Activiti7 + dynamic-datasource 多数据源配置</title>
    <link href="https://kiml.github.io/posts/2dbd20ab/"/>
    <id>https://kiml.github.io/posts/2dbd20ab/</id>
    <published>2025-03-03T03:23:07.000Z</published>
    <updated>2025-04-07T09:49:48.715Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>之前数据库不涉及多数据源的问题，本次引入 Activiti7 后需要配置单独的数据源。网上的方法都是自己写 bean 注入，然后在 SpringProcessEngineConfiguration 内进行 set 操作，但是出现了很大的问题。。。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-03-03 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><p>原参考文章如下：<a class="link"   href="https://blog.csdn.net/qq_20391065/article/details/89475435" >SpringBoot 给 Activiti7 配置单独数据源<i class="fas fa-external-link-alt"></i></a>。</p><p>根据文章配置，出现了原来配置的其他数据源失效，原先的事物注解 <code>@Transactional</code> 失效等问题。</p><h2 id="原因">原因</h2><p>具体原因不清楚，目前只知道 <code>@Bean</code> 配置 <code>PlatformTransactionManager</code> 和 <code>DataSource</code> 会导致 dynamic-datasource 配置的默认数据源失效。</p><h2 id="解决">解决</h2><p>从 <code>DynamicDataSourceProvider</code> 获取数据源并构建事物管理，具体配置信息如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActivitiDataSourceConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractProcessEngineAutoConfiguration</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> DynamicDataSourceProvider dynamicDataSourceProvider;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> SpringProcessEngineConfiguration <span class="title function_">springProcessEngineConfiguration</span><span class="params">(ActivitiProperties activitiProperties)</span> &#123;  </span><br><span class="line">        <span class="type">SpringProcessEngineConfiguration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringProcessEngineConfiguration</span>();  </span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> dynamicDataSourceProvider.loadDataSources().get(DBConstants.DATASOURCE_WORKFLOW);  </span><br><span class="line">        conf.setDataSource(dataSource);  </span><br><span class="line">        conf.setTransactionManager(<span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource));  </span><br><span class="line">        conf.setDeploymentName(activitiProperties.getDeploymentName());  </span><br><span class="line">        conf.setDatabaseSchema(activitiProperties.getDatabaseSchema());  </span><br><span class="line">        conf.setDatabaseSchemaUpdate(activitiProperties.getDatabaseSchemaUpdate());  </span><br><span class="line">        conf.setDbHistoryUsed(activitiProperties.isDbHistoryUsed());  </span><br><span class="line">        conf.setAsyncExecutorActivate(activitiProperties.isAsyncExecutorActivate());  </span><br><span class="line">        <span class="keyword">if</span> (!activitiProperties.isAsyncExecutorActivate()) &#123;  </span><br><span class="line">            <span class="type">ValidatorSet</span> <span class="variable">springBootStarterValidatorSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidatorSet</span>(<span class="string">&quot;activiti-spring-boot-starter&quot;</span>);  </span><br><span class="line">            springBootStarterValidatorSet.addValidator(<span class="keyword">new</span> <span class="title class_">AsyncPropertyValidator</span>());  </span><br><span class="line">            <span class="keyword">if</span> (conf.getProcessValidator() == <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="type">ProcessValidatorImpl</span> <span class="variable">processValidator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessValidatorImpl</span>();  </span><br><span class="line">                processValidator.addValidatorSet(springBootStarterValidatorSet);  </span><br><span class="line">                conf.setProcessValidator(processValidator);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                conf.getProcessValidator().getValidatorSets().add(springBootStarterValidatorSet);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        conf.setMailServerHost(activitiProperties.getMailServerHost());  </span><br><span class="line">        conf.setMailServerPort(activitiProperties.getMailServerPort());  </span><br><span class="line">        conf.setMailServerUsername(activitiProperties.getMailServerUserName());  </span><br><span class="line">        conf.setMailServerPassword(activitiProperties.getMailServerPassword());  </span><br><span class="line">        conf.setMailServerDefaultFrom(activitiProperties.getMailServerDefaultFrom());  </span><br><span class="line">        conf.setMailServerUseSSL(activitiProperties.isMailServerUseSsl());  </span><br><span class="line">        conf.setMailServerUseTLS(activitiProperties.isMailServerUseTls());  </span><br><span class="line">  </span><br><span class="line">        conf.setHistoryLevel(activitiProperties.getHistoryLevel());  </span><br><span class="line">        conf.setCopyVariablesToLocalForTasks(activitiProperties.isCopyVariablesToLocalForTasks());  </span><br><span class="line">        conf.setSerializePOJOsInVariablesToJson(activitiProperties.isSerializePOJOsInVariablesToJson());  </span><br><span class="line">        conf.setJavaClassFieldForJackson(activitiProperties.getJavaClassFieldForJackson());  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (activitiProperties.getCustomMybatisMappers() != <span class="literal">null</span>) &#123;  </span><br><span class="line">            conf.setCustomMybatisMappers(getCustomMybatisMapperClasses(activitiProperties.getCustomMybatisMappers()));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (activitiProperties.getCustomMybatisXMLMappers() != <span class="literal">null</span>) &#123;  </span><br><span class="line">            conf.setCustomMybatisXMLMappers(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(activitiProperties.getCustomMybatisXMLMappers()));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (activitiProperties.getCustomMybatisXMLMappers() != <span class="literal">null</span>) &#123;  </span><br><span class="line">            conf.setCustomMybatisXMLMappers(<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(activitiProperties.getCustomMybatisXMLMappers()));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (activitiProperties.isUseStrongUuids()) &#123;  </span><br><span class="line">            conf.setIdGenerator(<span class="keyword">new</span> <span class="title class_">StrongUuidGenerator</span>());  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (activitiProperties.getDeploymentMode() != <span class="literal">null</span>) &#123;  </span><br><span class="line">            conf.setDeploymentMode(activitiProperties.getDeploymentMode());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> conf;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;之前数据库不涉及多数据源的问题，本次引入 Activiti7 后需要配置单独的数据源。网上的方法都是自己写 bean 注入，然后在 SpringProcessEngineConfiguration 内进行 set 操作，但是出现了很大的问题。。。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-03-03 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2025" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2025/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>社区中老年志愿者平台</title>
    <link href="https://kiml.github.io/posts/25cfff2e/"/>
    <id>https://kiml.github.io/posts/25cfff2e/</id>
    <published>2025-02-02T07:13:08.000Z</published>
    <updated>2025-04-07T15:16:48.241Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>本项目主要记录自接外包项目需要注意的点。项目 git 地址：<a class="link"   href="https://gitee.com/kiml_rgb/silver-volunteer.git" >https://gitee.com/kiml_rgb/silver-volunteer.git<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25-02-02 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="项目概述">项目概述</h2><p>单体项目，分为小程序端和后台管理部分。本项目相关笔记<strong>主要用于记录对接外包项目需要注意的要点</strong>。</p><h2 id="技术栈">技术栈</h2><table><thead><tr><th>层级</th><th>技术</th></tr></thead><tbody><tr><td>视图</td><td>小程序、Vue</td></tr><tr><td>组件</td><td>Spring boot、Log4j2、Mybatis Plus</td></tr><tr><td>基础设施</td><td>Mysql、Minio</td></tr><tr><td>DevOps</td><td>Maven、Git</td></tr></tbody></table><h2 id="准备">准备</h2><h3 id="收费">收费</h3><table><thead><tr><th>项目</th><th>计费标准</th></tr></thead><tbody><tr><td>阿里云服务器</td><td>按阿里云报价信息（新人首年有折扣）</td></tr><tr><td>域名</td><td>一年一续费</td></tr><tr><td>小程序认证费用</td><td>每年 300</td></tr><tr><td>开发费用</td><td></td></tr></tbody></table><h3 id="时间">时间</h3><table><thead><tr><th>项目</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>小程序备案</td><td>3 day</td><td>企业资质</td></tr><tr><td>小程序后台备案（服务器域名备案）</td><td>3 day</td><td>个人资质，与小程序备案资质可以不同，只需要后台可以访问</td></tr><tr><td>阿里云短信资质审核</td><td>1 day</td><td>阿里云实名为个人，审核资质为自用</td></tr><tr><td>阿里云短信签名审核（试用）</td><td>2 hour</td><td>自用资质在没有备案网站/上线 App 的情况下只能选择线上试用，线上试用短信有限制</td></tr><tr><td>阿里云短信签名审核（已备案网站）</td><td>7-10 day</td><td>目前运营商实名报备流程平均需要 5-7 个工作日，部分运营商可能延长至<strong>7-10 个工作日</strong>。</td></tr><tr><td>阿里云短信模板审核</td><td>2 hour</td><td></td></tr><tr><td>域名注册</td><td></td><td>信息模板 实名认证</td></tr></tbody></table><h3 id="服务器">服务器</h3><ol><li class="lvl-3"><p>前后端项目</p></li><li class="lvl-3"><p>Java 环境、MySQL 环境、Redis 环境</p></li><li class="lvl-3"><p>文件存储服务（例：Minio）、docker 环境</p></li></ol><blockquote><p>内链：[[装机-软件安装（Linux）]]<br>外链：<a class="link"   href="https://kiml.site/posts/89b09b58/" >装机-软件安装（Linux）<i class="fas fa-external-link-alt"></i></a></p></blockquote><ol start="4"><li class="lvl-3"><p>nginx</p></li></ol><blockquote><p>内链：[[【代码模板】Nginx]]<br>外链：<a href="">【代码模板】Nginx</a></p></blockquote><ol start="5"><li class="lvl-3"><p>ssl 证书</p></li></ol><blockquote><p>内链：[[Let’s Encrypt 免费申请泛域名 SSL 证书，并实现自动续期]]<br>外链：<a href="">Let’s Encrypt 免费申请泛域名 SSL 证书，并实现自动续期</a></p></blockquote><h2 id="BUG">BUG</h2><h3 id="emoji-表情保存报错">emoji 表情保存报错</h3>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;本项目主要记录自接外包项目需要注意的点。项目 git 地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/kiml_rgb/silver-volunteer.git&quot; &gt;https://gitee.com/kiml_rgb/silver-volunteer.git&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;25-02-02 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="其他项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%85%B6%E4%BB%96%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker拉取失败</title>
    <link href="https://kiml.github.io/posts/4512ff84/"/>
    <id>https://kiml.github.io/posts/4512ff84/</id>
    <published>2024-12-12T14:27:28.000Z</published>
    <updated>2024-12-15T12:04:42.189Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>参考文章：<a class="link"   href="https://blog.csdn.net/2301_79849395/article/details/142829852" >彻底解决docker：docker: Get https://registry-1.docker.io/v2/: net/http: request canceled 报错<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-12-12 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><p>docker配置了镜像，拉取失败。报错信息：<code>ERROR: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: request canceled while waiting for connection</code></p><h2 id="原因">原因</h2><p>镜像地址失效。</p><h2 id="解决">解决</h2><h3 id="换源">换源</h3><blockquote><p>本次未使用，需要换源重启，但是原docker中含有跳板机，需要跳板机才能连接上服务器，重启会导致跳板机连接失败。</p></blockquote><ol><li class="lvl-3"><p>修改 <code>/etc/docker/daemon.json</code>文件</p></li><li class="lvl-3"><p>加入镜像配置</p></li><li class="lvl-3"><p>重启</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload   </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="修改DNS服务配置">修改DNS服务配置</h3><blockquote><p>未使用</p></blockquote><h3 id="手动拉取">手动拉取</h3><blockquote><p>解决。需要注意的是手动拉取后，使用docker-compose进行部署，需要填写拉取的镜像（加上仓库名），不然依旧会从原地址拉取</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull 仓库名/镜像名:版本号</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">暂时可用的一个仓库</span></span><br><span class="line">docker.m.daocloud.io</span><br></pre></td></tr></table></figure><h3 id="给docker配置一个代理">给docker配置一个代理</h3><blockquote><p>未使用。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/2301_79849395/article/details/142829852&quot; &gt;彻底解决docker：docker: Get https://registry-1.docker.io/v2/: net/http: request canceled 报错&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-12-12 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
    <category term="docker" scheme="https://kiml.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube与GitLab集成（一）</title>
    <link href="https://kiml.github.io/posts/7d0e1c35/"/>
    <id>https://kiml.github.io/posts/7d0e1c35/</id>
    <published>2024-12-11T09:22:07.000Z</published>
    <updated>2025-04-11T06:27:05.149Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>最近比较闲，分配了这个任务，顺便做个笔记。更新第二版方案，更适合生产环境。</p></li><li class="lvl-2"><p>参考文章<br><a class="link"   href="https://blog.linxiaodong.com/blog/gitlab-ci-with-sonarQube" >在 gitlab ci/cd 流程中集成 sonar 进行自动 Code Review<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.cnblogs.com/scajy/p/15661187.html" >gitlab Runner 安装与部署<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24-12-11 初始记录</span><br><span class="line">24-12-12 完成SonarQube与插件的安装</span><br><span class="line">24-12-16 maven 与 多模块项目</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="准备工作">准备工作</h2><ol><li class="lvl-3"><p><a class="link"   href="https://docs.sonarsource.com/sonarqube-server/latest/setup-and-upgrade/pre-installation/linux/" >SonarQube<i class="fas fa-external-link-alt"></i></a>：选择适合项目的 SonarQube 版本。~<s><mark>Java8 适配的 SonarQube 版本最高为 7.8</mark></s>~。这里部署的是： docker 方式的 9.9 LTS 版本<em>官方长期支持版本</em>。</p></li><li class="lvl-3"><p>GitLab：14.9.1 版本</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过以下命令查看</span></span><br><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>docker：Docker version 20.10.17, build 100c701。<mark>官方推荐版本 20.10 以上。</mark></p></li><li class="lvl-3"><p>Gitlab CI</p></li><li class="lvl-3"><p>SonarScanner/Maven + Java 11</p></li></ol><h3 id="SonarQube-安装">SonarQube 安装</h3><ol><li class="lvl-3"><p><code>docker-compose.yml</code></p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">sonarqube:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonarqube:9.9-community</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_URL:</span> <span class="string">jdbc:postgresql://db:5432/sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_USERNAME:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">SONAR_JDBC_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_data:/opt/sonarqube/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sonarqube_conf:/opt/sonarqube/conf</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:15.3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">sonar</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">sonar</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgresql:/var/lib/postgresql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgresql_data:/var/lib/postgresql/data</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">sonarqube_data:</span></span><br><span class="line"><span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sonarqube_extensions:</span></span><br><span class="line"><span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sonarqube_logs:</span></span><br><span class="line"><span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sonarqube_conf:</span></span><br><span class="line"><span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postgresql:</span></span><br><span class="line">  <span class="attr">postgresql_data:</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>docker-compose 命令</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前台启动, 启动项目中的所有服务。</span></span><br><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动, 启动所有服务并在后台运行。</span> </span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f 指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定</span></span><br><span class="line">docker-compose -f docker-compose.yml up -d</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出项目中目前的所有容器</span></span><br><span class="line">docker-compose ps</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止所有服务。</span></span><br><span class="line">docker-compose stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止和删除容器、网络、卷、镜像。</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除已经在compose文件中定义的和匿名的附在容器上的数据卷</span></span><br><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure><h3 id="SonarQube-插件安装">SonarQube 插件安装</h3><p>SonarQube 有两个插件：</p><ul class="lvl-0"><li class="lvl-2"><p><a class="link"   href="https://github.com/javamachr/sonar-gitlab-plugin" >https://github.com/javamachr/sonar-gitlab-plugin<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p><a class="link"   href="https://github.com/mc1arke/sonarqube-community-branch-plugin" >https://github.com/mc1arke/sonarqube-community-branch-plugin<i class="fas fa-external-link-alt"></i></a><br>第一个插件可以将 <code>SonarQube</code> 的审查结果以评论的试发布到 gitlab 上面。<mark>暂未使用</mark>第二个插件可以实现增强 <code>SonarQube</code> 多分支包括 MR 的代码检测。</p></li></ul><ol><li class="lvl-3"><p>下载 sonar-gitlab-plugin 对应 5.4 版本的 jar 包</p></li><li class="lvl-3"><p>下载 sonarqube-community-branch-plugin 对应 1.14.0 的 jar 包</p></li><li class="lvl-3"><p>上传 jar 包到挂载的 <code>sonarqube_extensions</code> 目录里面的 <code>plugins</code> 目录里面。上传到 JumpServer 可以在目录下输入：<code>rz</code>；下载为 <code>sz</code></p></li><li class="lvl-3"><p>修改挂载的 <code>sonarqube_conf</code> 目录路径下面的 <code>sonar.properties</code> 配置文件，添加如下配置</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sonar.web.javaAdditionalOpts</span>=<span class="string">-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.14.0.jar=web</span></span><br><span class="line"><span class="attr">sonar.ce.javaAdditionalOpts</span>=<span class="string">-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.14.0.jar=ce</span></span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>重启 SonarQube</p></li></ol><h3 id="Gitlab-CI-安装与注册">Gitlab CI 安装与注册</h3><ol><li class="lvl-3"><p>版本确认<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_17-50-00.png"                        alt=""                 ><br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_17-50-59.png"                        alt=""                 ></p></li><li class="lvl-3"><p>安装与 Gitlab 一致的 Gitlab-Runner 版本。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7/gitlab-runner-14.9.0-1.x86_64.rpm --no-check-certificate</span><br><span class="line"></span><br><span class="line">sudo rpm -ivh gitlab-runner-14.9.0-1.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否安装成功</span></span><br><span class="line">gitlab-runner -v</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>指定 gitlab-runner 用户为 root 用户</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner uninstall </span><br><span class="line"></span><br><span class="line">sudo gitlab-runner install --working-directory /home/zwadmin --user zwadmin</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>启动 gitlab 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">/bin/systemctl start gitlab-runner</span><br><span class="line"></span><br><span class="line">/bin/systemctl enable gitlab-runner</span><br><span class="line"></span><br><span class="line">/bin/systemctl restart gitlab-runner</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>设置权限</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R zwadmin.zwadmin /home/gitlab-runner</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>注册服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入公司的gitlab公网地址</span> </span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/): https://gitlab.wuidm.com/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入gitlab的token</span> </span><br><span class="line">Please enter the gitlab-ci token for this runner: </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入描述这个runner名称</span> </span><br><span class="line">Please enter the gitlab-ci description for this runner: [k8s-node02]: </span><br><span class="line">test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入runner的标签</span> </span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated): </span><br><span class="line">my-tag,another-tag </span><br><span class="line">Registering runner... succeeded runner=8sjydnrs </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入runner执行器的环境</span> </span><br><span class="line">Please enter the executor: custom, docker-ssh, parallels, kubernetes, docker-ssh+machine, docker, shell, ssh, virtualbox, docker+machine: </span><br><span class="line">shell </span><br></pre></td></tr></table></figure><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/image-20241215192203774.png"                        alt="token位置"                 ></p><h3 id="SonarScanner-安装">SonarScanner 安装</h3><blockquote><p>多模块项目建议用 Maven，这部分可以不看</p></blockquote><ol><li class="lvl-3"><p><a class="link"   href="https://docs.sonarsource.com/sonarqube-server/latest/analyzing-source-code/scanners/sonarscanner/" >官网下载<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>上传服务器后，解压</p></li><li class="lvl-3"><p>配置环境变量</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下语句</span></span><br><span class="line">export SONARRUNNER_HOME=/home/zwadmin/soft/sonar-scanner/sonar-scanner-6.2.1.4610-linux-x64</span><br><span class="line">export PATH=$SONARRUNNER_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">sudo source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否安装成功</span></span><br><span class="line">sonar-scanner -v</span><br></pre></td></tr></table></figure><h3 id="Maven-安装">Maven 安装</h3><blockquote><p>Maven 更适配多模块项目</p></blockquote><ol><li class="lvl-3"><p><a class="link"   href="https://maven.apache.org/download.cgi" >官网下载<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>上传服务器后，解压</p></li><li class="lvl-3"><p>配置环境变量</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加以下语句</span></span><br><span class="line">export M2_HOME=/opt/maven </span><br><span class="line">export PATH=$M2_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否安装成功</span></span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h2 id="与-Gitlab-集成">与 Gitlab 集成</h2><ol><li class="lvl-3"><p>登录 <a class="link"   href="http://gitlab.com" >gitlab.com<i class="fas fa-external-link-alt"></i></a>，创建一个测试仓库，并在用户设置里面，创建一个个人访问令牌。<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_16-56-59.png"                        alt=""                 ></p></li><li class="lvl-3"><p>登录 SonarQube，在 project 管理里面即可通过这个个人访问令牌来导入 gitlab 上面的项目<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/pQ5FPu_20240508_tigfcJ.png"                        alt=""                 ></p></li><li class="lvl-3"><p>导入后，选择以 gitlab ci 的方式来执行 ci 流程<em>前提 gitlab ci 开启</em><br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_17-06-08.png"                        alt="|500"                 ></p></li><li class="lvl-3"><p>根据提示，完成所有步骤。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>在项目中创建 <code>sonar-project.properties</code>， 并粘贴提示内的内容。<mark>多分支指定分支需要下载 sonarqube-community-branch-plugin 插件。额外添加 sonar.branch.name=XXX</mark><br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_17-07-49.png"                        alt=""                 ></p></li><li class="lvl-2"><p>在 gitlab 的设置， CI/CD 设置里面，添加环境变量</p></li><li class="lvl-2"><p>在项目里面创建一个 <code>.gitlab-ci.yml</code> 文件，并按照提示贴入最小化配置内容</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sonarqube-check:</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">test</span>  </span><br><span class="line">  <span class="attr">variables:</span>  </span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">&quot;$&#123;CI_PROJECT_DIR&#125;/.sonar&quot;</span>  <span class="comment"># Defines the location of the analysis task cache  </span></span><br><span class="line">    <span class="attr">GIT_DEPTH:</span> <span class="string">&quot;0&quot;</span>  <span class="comment"># Tells git to fetch all the branches of the project, required by the analysis task  </span></span><br><span class="line">  <span class="attr">cache:</span>  </span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;$&#123;CI_JOB_NAME&#125;&quot;</span>  </span><br><span class="line">    <span class="attr">paths:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar/cache</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar-scanner</span>  </span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">only:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span>  </span><br><span class="line"><span class="comment">#    - merge_requests  </span></span><br><span class="line"><span class="comment">#    - develop</span></span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>在 SonarQube 的通用配置里面，配置好 base URL， 以方便在 gitlab 的评论里面能够正确连接到 SonarQube 平台。<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-15_17-15-50.png"                        alt=""                 ></p></li></ol><h2 id="使用-Maven-与-Gitlab-集成">使用 Maven 与 Gitlab 集成</h2><blockquote><p>Maven 更适配多模块项目，1、2、3、5 步骤相同，4 配置如下</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>在父项目 pom.xml 文件中添加配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sonar.qualitygate.wait</span>&gt;</span>true<span class="tag">&lt;/<span class="name">sonar.qualitygate.wait</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sonar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0.3922<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在 gitlab 的设置， CI/CD 设置里面，添加环境变量</p></li><li class="lvl-2"><p>在项目里面创建一个 <code>.gitlab-ci.yml</code> 文件，并按照提示贴入最小化配置内容</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sonarqube-check:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">&quot;$&#123;CI_PROJECT_DIR&#125;/.sonar&quot;</span>  <span class="comment"># Defines the location of the analysis task cache</span></span><br><span class="line">    <span class="attr">GIT_DEPTH:</span> <span class="string">&quot;0&quot;</span>  <span class="comment"># Tells git to fetch all the branches of the project, required by the analysis task</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;$&#123;CI_JOB_NAME&#125;&quot;</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar/cache</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">JAVA_HOME=/home/zwadmin/data/jdk-11/</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">JAVA_HOME</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">verify</span> <span class="string">sonar:sonar</span> <span class="string">-Dsonar.projectKey=com.ydm:zw-ydm</span> <span class="string">-Dsonar.branch.name=feature/sonar-1216</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">feature/sonar-1216</span></span><br><span class="line"><span class="comment">#    - merge_requests</span></span><br></pre></td></tr></table></figure><h2 id="整合-IDEA-插件">整合 IDEA 插件</h2><blockquote><p>用于同步服务器上的规则、质量配置文件和文件排除设置。</p></blockquote><ol><li class="lvl-3"><p>创建 token 类型为用户<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-19_16-29-42.png"                        alt="|800"                 ></p></li><li class="lvl-3"><p>IDEA Plugins Marketplace 下载 SonarQube for IDE。</p></li><li class="lvl-3"><p>连接到 SonarQube。<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-19_16-33-19.png"                        alt="|800"                 ><br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/Snipaste_2024-12-19_16-34-52.png"                        alt="|800"                 ></p></li><li class="lvl-3"><p>配置项目<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/12/537f5bb5-2e02-414b-a4b6-9f76ab01114c.png"                        alt="|800"                 ></p></li></ol><h2 id="完整版-gitlab-ci-yml">完整版 <code>.gitlab-ci.yml</code></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonarqube</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">notify</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="string">noop</span>  </span><br><span class="line"><span class="attr">sonarqube-check:</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonarqube</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">variables:</span>  </span><br><span class="line">    <span class="attr">SONAR_USER_HOME:</span> <span class="string">&quot;$&#123;CI_PROJECT_DIR&#125;/.sonar&quot;</span>  <span class="comment"># Defines the location of the analysis task cache  </span></span><br><span class="line">    <span class="attr">GIT_DEPTH:</span> <span class="string">&quot;0&quot;</span>  <span class="comment"># Tells git to fetch all the branches of the project, required by the analysis task  </span></span><br><span class="line">  <span class="attr">cache:</span>  </span><br><span class="line">    <span class="attr">key:</span> <span class="string">&quot;$&#123;CI_COMMIT_REF_NAME&#125;&quot;</span> <span class="comment"># 使用分支名作为缓存的 key    paths:  </span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.sonar/cache</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">JAVA_HOME=***</span> <span class="string">&amp;&amp;</span> <span class="string">export</span> <span class="string">JAVA_HOME</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">SONAR_JAVA_OPTS=&quot;-Xmx2G</span> <span class="string">-Xms1G&quot;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">verify</span> <span class="string">sonar:sonar</span> <span class="string">-T</span> <span class="number">10</span> <span class="string">-Dsonar.projectKey=</span> <span class="string">-Dsonar.branch.name=master</span> <span class="string">-Dmaven.test.skip=true</span> <span class="string">-Dsonar.qualitygate.wait=false</span> <span class="string">-Dsonar.ce.parallel=1</span> <span class="string">-Dmaven.repo.local=***</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="comment"># 如果 SKIP_SONAR 为 &quot;true&quot;，跳过任务  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$SKIP_SONAR == &quot;true&quot;&#x27;</span>  </span><br><span class="line">      <span class="attr">when:</span> <span class="string">never</span>  </span><br><span class="line">    <span class="comment"># 在合并请求时触发  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">sonar_to_feishu:</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">notify</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">|  </span></span><br><span class="line"><span class="string">      response=$(curl -u admin:123456Aa -s &quot;***/api/qualitygates/project_status?projectKey=com.ydm%3Azw-ydm&amp;branch=master&quot;)  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      echo &quot;$response&quot;  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      quality_gate_status=$(echo &quot;$response&quot; | grep -o &#x27;&quot;status&quot;:&quot;[^&quot;]*&quot;&#x27; | head -n 1 | sed &#x27;s/&quot;status&quot;:&quot;\([^&quot;]*\)&quot;/\1/&#x27;)  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      echo &quot;$quality_gate_status&quot;  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      if [ &quot;$quality_gate_status&quot; == &quot;OK&quot; ]; then  </span></span><br><span class="line"><span class="string">        status=&quot;通过 (OK)&quot;  </span></span><br><span class="line"><span class="string">      else  </span></span><br><span class="line"><span class="string">        status=&quot;未通过 (ERROR)&quot;  </span></span><br><span class="line"><span class="string">      fi  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      echo &quot;请求飞书&quot;  </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">      curl -X POST -H &quot;Content-Type: application/json&quot; \  </span></span><br><span class="line"><span class="string">        -d &quot;&#123;  </span></span><br><span class="line"><span class="string">            \&quot;msg_type\&quot;: \&quot;post\&quot;,  </span></span><br><span class="line"><span class="string">            \&quot;content\&quot;: &#123;  </span></span><br><span class="line"><span class="string">              \&quot;post\&quot;: &#123;  </span></span><br><span class="line"><span class="string">                \&quot;zh_cn\&quot;: &#123;  </span></span><br><span class="line"><span class="string">                  \&quot;title\&quot;: \&quot;SonarQube 分析完成\&quot;,  </span></span><br><span class="line"><span class="string">                  \&quot;content\&quot;: [  </span></span><br><span class="line"><span class="string">                    [&#123;  </span></span><br><span class="line"><span class="string">                      \&quot;tag\&quot;: \&quot;text\&quot;,  </span></span><br><span class="line"><span class="string">                      \&quot;text\&quot;: \&quot;项目：zw-ydm\n分支：master\n状态：$status\n仪表盘：\&quot;  </span></span><br><span class="line"><span class="string">                    &#125;, &#123;  </span></span><br><span class="line"><span class="string">                      \&quot;tag\&quot;: \&quot;a\&quot;,  </span></span><br><span class="line"><span class="string">                      \&quot;text\&quot;: \&quot;点击查看\&quot;,  </span></span><br><span class="line"><span class="string">                      \&quot;href\&quot;: \&quot;***/dashboard?id=com.ydm%3Azw-ydm&amp;branch=master\&quot;  </span></span><br><span class="line"><span class="string">                    &#125;]  </span></span><br><span class="line"><span class="string">                  ]  </span></span><br><span class="line"><span class="string">                &#125;  </span></span><br><span class="line"><span class="string">              &#125;  </span></span><br><span class="line"><span class="string">            &#125;  </span></span><br><span class="line"><span class="string">        &#125;&quot; \  </span></span><br><span class="line"><span class="string">      https://open.feishu.cn/open-apis/bot/v2/hook/***</span></span><br><span class="line"><span class="string"></span>  <span class="attr">needs:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonarqube-check</span>  </span><br><span class="line">  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="comment"># 如果 SKIP_SONAR 为 &quot;true&quot;，跳过任务  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$SKIP_SONAR == &quot;true&quot;&#x27;</span>  </span><br><span class="line">      <span class="attr">when:</span> <span class="string">never</span>  </span><br><span class="line">    <span class="comment"># 在合并请求时触发  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="attr">noop:</span>  </span><br><span class="line">  <span class="attr">tags:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">sonar</span>  </span><br><span class="line">  <span class="attr">stage:</span> <span class="string">noop</span>  </span><br><span class="line">  <span class="attr">script:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Pipeline skipped all main jobs.&quot;</span>  </span><br><span class="line">  <span class="attr">rules:</span>  </span><br><span class="line">    <span class="comment"># 在合并请求时触发  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&#x27;$CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="BUG-记录">BUG 记录</h2><h3 id="docker-拉取失败-Client-Timeout-exceeded-while-awaiting-headers">docker 拉取失败 (Client.Timeout exceeded while awaiting headers)</h3><blockquote><p>内链：[[Docker拉取失败 (Client.Timeout exceeded while awaiting headers)]]</p><p>外链：<a class="link"   href="https://kiml.site/posts/4512ff84/" >Docker拉取失败 (Client.Timeout exceeded while awaiting headers)<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="docker-compose-加载挂载卷，只加载默认">docker-compose 加载挂载卷，只加载默认</h3><blockquote><p>未完全解决。有一个较麻烦的方法。</p></blockquote><ol><li class="lvl-3"><p>手动挂载卷</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo docker volume create --driver local --opt type=none --opt device=/home/zwadmin/data/docker/sonarqube/data --opt o=bind sonarqube_data</span><br><span class="line">sudo docker volume create --driver local --opt type=none --opt device=/home/zwadmin/data/docker/sonarqube/extensions --opt o=bind sonarqube_extensions</span><br><span class="line">sudo docker volume create --driver local --opt type=none --opt device=/home/zwadmin/data/docker/sonarqube/logs --opt o=bind sonarqube_logs</span><br><span class="line">sudo docker volume create --driver local --opt type=none --opt device=/home/zwadmin/data/docker/sonarqube/conf --opt o=bind sonarqube_conf</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在 <code>docker-compose.yml</code> 中从外部加载卷</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">sonarqube_data:</span></span><br><span class="line"><span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;最近比较闲，分配了这个任务，顺便做个笔记。更新第二版方案，更适合生产环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.linxiaodong.com/blog/gitlab-ci-with-sonarQube&quot; &gt;在 gitlab ci/cd 流程中集成 sonar 进行自动 Code Review&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/scajy/p/15661187.html&quot; &gt;gitlab Runner 安装与部署&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-12-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-12-12 完成SonarQube与插件的安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-12-16 maven 与 多模块项目&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="GitLab" scheme="https://kiml.github.io/tags/GitLab/"/>
    
    <category term="SonarQube" scheme="https://kiml.github.io/tags/SonarQube/"/>
    
  </entry>
  
  <entry>
    <title>消息平台-核心文档</title>
    <link href="https://kiml.github.io/posts/d978b51b/"/>
    <id>https://kiml.github.io/posts/d978b51b/</id>
    <published>2024-11-26T03:20:58.000Z</published>
    <updated>2024-12-15T12:04:06.920Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="71f9c6740f7768fdc9e9bab4f48997b7f390fec68d33667f2ac30a7a8dc4433a">75e86ac553190f42ebdd56fafb303e85dc6a1a1a46f0acebaf1f04073eb758dc03ced5e004cf01aca104fdc62a8d68e601b59b3212abdab62d5f768d15cfa18c332989279c5f056126be2ebf5e2b3ce3c9aeeebb8e1e27a7209ae5ef44a58468afee8f711fe819700b0f6de40aa5cd11a0f68cf099f9875ce5d3c113175d0e316d43438e034cc9f1ae0301edf1d9428fd136db5d3f27ac447de92039f0eb1ca246fbafc11d70b0c340bb41c758ceb2b2c39454755e85eba1b7bd59de454695259f7d9cfa8db6039421353a6be2676b54e64ece29430084b53f318e40f38b763adb319c0c599ee0187bcc11f4303fa978fb485dbfc8f947cfcd5b4679740c807c195d192b34cec54663145ce587bf43eacb6f4c2a87dd87e14c74093c12ec9c490087f040a9a452a6cd709be06c4ebda59ceb8ee75c348ea1d5ffb61d74307a6ad7b241a89b28bdf168b043f5ddb6999731df162df074c979d4e08508de1dbbcd8497df48cd5235bea17ec990572904bcb0ac6a2a7100bc448597d1b51c3e775a57ec36820f6f8f174362f72abd2d9623d6db315ccb3f6f12803d2a691851555246bb24ad11647136254cd31c13f89b6df8a5043809af0b3b6d1e01c73c8f860a8c37582a7985c94d445546bf72f75adf1340d6599310a20c2c20582295583d1ca64fd5ebf097ebb91dde9d3180bcbb6a7b9139d1893c09d12db952b61184de93ca34c36fecebd5932c81ae55f95a6f4ca74e8fb0f3441b3c7480bd2e1405d68e67135a237a92aa157c9423ca0e7d115419723b1e870152f7a326670e59b871daad2d38af4149191937327ff9ccaad5e66c389efe894b71ff963dfad9ca98822a05c67573d72c4bd0275993c4235fb26aed1c13c0668b6031db1b4ff27b540a6f30b9bccd769c7b410eec83a90a0e11eec29b775fa43b66e57432b3b4fdc6ee2807691b868548d39060e67e6a991a292cb85d47e08ffb903d1b94e7c68f47d604a58d99649bba8d78e3e9807f52dd4a4489274de5ed20026d180d84fc7ff30e6d72e69da150631eb17d36b66f1f104e3504a25e94cee20fa0d0bf3b887d1906127622f586fac1958c0e67c074a8c4c5b179ac480c275a5a1ddf7a292467758e71f6cf16c6849f2f2e5815bfba33a4820e5c95424e66dc45d317a95f66b2f39f2084dcea51b1e99345d3e6e864902533229a56e2aeb17125dbd038116ebd1cf64fc66cd8f562cc73bff28e0206d304c63e700b8bfb8f157fcc552c367568b42f5edc8aa4af901f2f1f2199331178c844722cd4fe001d5266308b743d389dab012ee19a414f97915718613e7be7ac22746d30c95a06b17f2a1c444934b8480dd07041cd643d0444f9ba9d6e66cd6b0bba25c5855bee4a413d48eb012b4c05d7f6619508f6b3fc6602965582767be5f44070c525a50a2fff69a2d9816d736d3605f6d5728784d7b83e7bc6ba6e6f3bc77ac289934a3bfb99b5106e306f5878396738551e4abe7ecd9e1168a32ba97fd13d4ccd73eb98b0b8cc4cbca9ef2912107dd891766bf43fce6014457dc7872ca397834ca735e0a25abe701b74feb02543546adec2413d5ae389fb9de21f7a6859f0564df8877c18ff12b14b6ddbbb2db7a2b10f9aede01750337badfdebb6ae178bb29b8e95a09d627a5572c738510f18c5f05257bc67edc5f6c5880a146d7496a18e2b04962045c09511f3b5e75ca0a50adb2091b18fdbc8a7366ba15df55f85ffd0491b1013dabacc9098fc073be2de988cff20587cb921f1a2df22600e1167d8a346d989b3a8c2f883de2568798d295fdf10f0bead231ea1aeb018b7a3ebf9906e9aba3e3aa9844c29bad5aa2a3b2a7761</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="消息平台" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E6%B6%88%E6%81%AF%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Windows 自带的 Linux 子系统</title>
    <link href="https://kiml.github.io/posts/ba3da13b/"/>
    <id>https://kiml.github.io/posts/ba3da13b/</id>
    <published>2024-09-22T09:03:39.000Z</published>
    <updated>2024-12-03T13:48:25.282Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>本来想在阿里云服务器上安装 jenkins，但是配置高的服务器价格太贵，配置低的非常容易 cpu 100%，不利于测试。所以打算直接用台式机做虚拟云主机。</p></li><li class="lvl-2"><p>参考文章<br><a class="link"   href="https://blog.csdn.net/FSKEps/article/details/118493578" >Win10 系统安装 Linux 子系统教程(WSL2 + Ubuntu 20.04 + Gnome 桌面 ）<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装-WSL">安装 WSL</h2><h3 id="安装-WSL1">安装 WSL1</h3><ol><li class="lvl-3"><p>管理员身份运行 PowerShell</p></li><li class="lvl-3"><p>输入命令，启用<mark>适用于 Linux 的 Windows 子系统</mark>功能</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>在 Microsoft Store 中选择中意的 Linux 分发版本，并安装</p></li><li class="lvl-3"><p>为新的 Linux 分发版创建用户账户和密码</p></li></ol><h3 id="升级到-WSL2">升级到 WSL2</h3><ol><li class="lvl-3"><p>开启“虚拟机平台”可选功能</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>重启电脑</p></li><li class="lvl-3"><p>下载 Linux 内核更新包<a class="link"   href="https://link.csdn.net/?from_id=118493578&amp;target=https%3A%2F%2Fwslstorestorage.blob.core.windows.net%2Fwslblob%2Fwsl_update_x64.msi" >适用于 x64 计算机的 WSL Linux 内核更新包<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>设置 WSL 版本</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\user-name&gt; wsl --set-version Ubuntu-20.04 2</span><br><span class="line">正在进行转换，这可能需要几分钟时间...</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">转换完成。</span><br></pre></td></tr></table></figure><h2 id="使用-WSL">使用 WSL</h2><h3 id="启动和退出-Linux">启动和退出 Linux</h3><p>进入 Linux 子系统有以下几种方式：</p><p>（1）和正常软件一样启动，如在开始菜单中点击其图标、双击桌面快捷方式<br>（2）在 Windows 中打开一个终端，如 PowerShell，输入命令 <code>wsl</code><br>（3）在终端中输入命令 <code>Linux 发行版名称.exe</code>，如 <code>ubuntu20.04.exe</code></p><p>退出 Linux 子系统的方式：</p><p>（1）直接关闭终端<br>（2）在终端中输入命令 <code>exit</code>，此时退出了 WSL，然后输入命令 <code>wsl -t Ubuntu-20.04</code>，关闭 ubuntu 子系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有分发的名称、运行状态、对应的 WSL 版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止指定的 Linux 分发</span></span><br><span class="line">wsl -t &lt;distro&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注销分发</span></span><br><span class="line">wsl --unregister &lt;distro&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止所有正在运行的分发和 WSL2 轻型工具虚拟机</span></span><br><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h3 id="换源">换源</h3><p>使用 Linux 子系统时，为了提高软件的安装速度，需要将软件源换成国内的镜像源。</p><ol><li class="lvl-3"><p>备份原来的数据源配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>修改数据源配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码仓库，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>更新源，升级软件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="使用-SSH-登录-Linux-子系统">使用 SSH 登录 Linux 子系统</h2><h3 id="开启-SSH-并允许-root-登录">开启 SSH 并允许 root 登录</h3><ol><li class="lvl-3"><p>安装 SSH 服务器</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>修改配置端口为 22，允许密码和 root 登录。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到下面的内容并去掉注释在前面的#号，其中把 <code>PermitRootLogin prohibit-password</code> 更改为 <code>PermitRootLogin yes</code> 这是允许用 root 登录的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>重启 SSH 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者运行这个命令</span></span><br><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>终端测试连接输入指令，格式为：<code>ssh 用户名@域名/IP</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@0.0.0.0</span><br><span class="line">ssh 127.0.0.1</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>确保 SSH 服务器会在系统启动时自动启动</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>配置永久解决方案将上述的命令保存为 <a class="link"   href="http://service.sh" >service.sh<i class="fas fa-external-link-alt"></i></a>，保存在 home 目录下</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; service ssh restart &gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> Xshell connection</span></span><br><span class="line">sudo service ssh --full-restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="string">service ssh restart &lt;&lt;&lt;</span></span></span><br></pre></td></tr></table></figure><p>配置好之后，下次开机，只需要在 Linux 子系统的默认终端运行 sh <a class="link"   href="http://service.sh" >service.sh<i class="fas fa-external-link-alt"></i></a> 命令后，关掉终端改用 xshell 登录即可。</p><ol start="7"><li class="lvl-3"><p>查看 SSH 监听端口</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ss -tuln | grep 22</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>SSH 服务器状态</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure><h3 id="设置默认使用-root-登录系统">设置默认使用 root 登录系统</h3><ol><li class="lvl-3"><p>切换 root 权限</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后输入密码</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建/打开 <code>/etc/wsl.conf</code> ，添加以下内容</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">default=root</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>运行以下命令重新启动 WSL 以应用更改</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h3 id="设置端口转发">设置端口转发</h3><blockquote><p>为了能够从外部连接到你的 WSL Linux 子系统，你需要确保系统具有公共 IP 地址，或者设置端口转发以将流量路由到 WSL 子系统的局域网 IP 地址。请检查你的网络配置，确保 WSL 子系统能够访问公共网络，并且有一个可供外部访问的 IP 地址。</p></blockquote><ol><li class="lvl-3"><p>增加转发的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=22 connectaddress=[IP] connectport=[PORT]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的IP为WSL中使用ipconfig查看的IP地址，PORT为WSL的PORT</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还需要在windows防火墙中添加对应的入站规则，设置完成后可以通过ip地址远程访问wsl</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>删除转发的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=22 listenaddress=0.0.0.0</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>使用以下命令列出当前的端口转发规则：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>测试连接的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip -p 22</span><br></pre></td></tr></table></figure><blockquote><p>这里测试连接的 ip 可以在 linux 内使用命令 <code>hostname -I</code> 进行查看</p></blockquote><h2 id="卸载-Linux-系统">卸载 Linux 系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h2 id="SSH-安全">SSH 安全</h2>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;本来想在阿里云服务器上安装 jenkins，但是配置高的服务器价格太贵，配置低的非常容易 cpu 100%，不利于测试。所以打算直接用台式机做虚拟云主机。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;br&gt;
&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/FSKEps/article/details/118493578&quot; &gt;Win10 系统安装 Linux 子系统教程(WSL2 + Ubuntu 20.04 + Gnome 桌面 ）&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Linux" scheme="https://kiml.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-责任链模式</title>
    <link href="https://kiml.github.io/posts/b6c1490f/"/>
    <id>https://kiml.github.io/posts/b6c1490f/</id>
    <published>2024-09-13T09:00:03.000Z</published>
    <updated>2024-12-14T07:30:51.754Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>设计模式 - 责任链模式</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-13 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="简单理解">简单理解</h2><p>可以简单的理解为，针对一个请求，做多层处理（ 不分先后），并且这些处理可能随着业务需求进行不断变更，这个时候就可以用责任链模式。比如说 Spring 中的 <code>Filter</code> 使用的就是责任链模式。* 这里理解与策略模式的不同在于：责任链有点像 if return 会每个匹配比较，而策略像 map get key 直接匹配一个；责任链多用于解耦，策略多用于封装 *</p><p>一般来说，这种多层处理可能代码中使用多个 if 来进行处理。处理方式可以如下：</p><ol><li class="lvl-3"><p>将处理的各个流程抽象为各个类（本来 Handler 里边有多个 <code>if</code> 和 <code>方法</code>)</p></li><li class="lvl-3"><p>将多个类用 <code>Chain</code> 链起来，暴露一个方法给 Handler 使用</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="comment">// 过滤  </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter3</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> &#123;  </span><br><span class="line">    List&lt;Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FilterChain</span><span class="params">()</span> &#123;  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter1</span>());  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter2</span>());  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter3</span>());</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (Filter filter : filters) &#123;  </span><br><span class="line">            filter.doFilter(data);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerRequest</span><span class="params">(Request request)</span> &#123;  </span><br><span class="line">        <span class="comment">// 得到请求的数据  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> request.getData();  </span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();  </span><br><span class="line">        <span class="comment">// 处理数据  </span></span><br><span class="line">        filterChain.processData(data);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用代码">通用代码</h2><ol><li class="lvl-3"><p><strong>业务执行器</strong>接口，所有的业务实现都会实现该接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 业务执行器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>责任链上下文</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 责任链上下文</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessContext</span> &#123;  </span><br><span class="line">    <span class="comment">// 标识责任链的code  </span></span><br><span class="line">    <span class="keyword">private</span> String code;  </span><br><span class="line">    <span class="comment">// 存储上下文的真正载体  </span></span><br><span class="line">    <span class="keyword">private</span> Model model;  </span><br><span class="line">    <span class="comment">// 责任链中断的标识  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">needBreak</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>业务执行模板（把责任链的逻辑串起来）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 业务执行模板（把责任链的逻辑串起来） </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTemplate</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;BusinessProcess&gt; processList;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;BusinessProcess&gt; <span class="title function_">getProcessList</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> processList;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProcessList</span><span class="params">(List&lt;BusinessProcess&gt; processList)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.processList = processList;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>责任链的流程控制器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 责任链的流程控制器（整个责任链的执行流程通用控制）</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessController</span> &#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 不同的code 对应不同的责任链  </span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ProcessTemplate&gt; templateConfig = <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="comment">//根据上下文的Code 执行不同的责任链  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">businessCode</span> <span class="operator">=</span> context.getCode();  </span><br><span class="line">        <span class="type">ProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> templateConfig.get(businessCode);  </span><br><span class="line">        List&lt;BusinessProcess&gt; actionList = processTemplate.getProcessList();  </span><br><span class="line">        <span class="comment">//遍历某个责任链的流程节点  </span></span><br><span class="line">        <span class="keyword">for</span> (BusinessProcess action : actionList) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                action.process(context);  </span><br><span class="line">                <span class="keyword">if</span> (context.getNeedBreak()) &#123;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;  </span><br><span class="line">                <span class="comment">//...  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>举例用的两个实现</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 白名单处理器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhiteListProcess</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">user</span> <span class="operator">=</span> (UserModel) context.getModel();  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;3y&quot;</span>.equals(user.getName())) &#123;  </span><br><span class="line">            context.setNeedBreak(<span class="literal">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发消息处理器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageProcess</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">user</span> <span class="operator">=</span> (UserModel) context.getModel();  </span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+user.getName()+<span class="string">&quot;发消息&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>把处理器添加到 <code>ProcessTemplate</code> 模板，把 <code>ProcessTemplate</code> 添加到 <code>ProcessController</code> 的 <code>Map</code> 上</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--发送消息的责任链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sendMessageTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chainofresponsibility.ProcessTemplate&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processList&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;whiteListProcess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;sendMessageProcess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--通用流程处理器，维护多条责任链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chainofresponsibility.ProcessController&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateConfig&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;sendMessage&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;sendMessageTemplate&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>接口里执行责任链</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessController processController;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建上下文</span></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">processContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">userModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserModel</span>();</span><br><span class="line">        userModel.setAge(<span class="string">&quot;24&quot;</span>);</span><br><span class="line">        userModel.setName(userName);</span><br><span class="line">        processContext.setModel(userModel);</span><br><span class="line">        processContext.setCode(<span class="string">&quot;sendMessage&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        processController.process(processContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline">Pipeline</h2><p><code>Redis</code> 会用 <code>Pipeline</code> 去做批量的操作。它是「责任链模式」的实现之一。</p><p>// 具体分析 todo</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
设计模式 - 责任链模式&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://kiml.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kiml.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://kiml.github.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>消息平台-核心代码</title>
    <link href="https://kiml.github.io/posts/4f08dd5e/"/>
    <id>https://kiml.github.io/posts/4f08dd5e/</id>
    <published>2024-09-13T07:18:48.000Z</published>
    <updated>2024-12-14T07:33:08.355Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b04c36868349d6d4ef94e9b8458cdc9d5408a7e69f5ae7949389db2dce4e75c0">665b6e36e8990f013070faca4228a0bfccd399cf756e12c68920c56ce8b4287efa95190af6d6209f579011876b8fa876e0bc2b631d0e227bd44e7792f33fee40dad7ec9375821980e8a38f95ea5d6068fdf072be6dfe9835ac738acc08e2b8652b180e2dd198205612d8298c4f272fd39d8b30f53e63690c16fcccbf7eb6681a06e2642eec08adebbadb213c7dc237ff929bcabc17115cc10f4c5b4fc9aebc200fcf18916cd0aa57c6fb3203481a404b20c9e749b4522858fd75b824a8d59085a8ff9aa5ac41736ec8bc70d688f60a680638bf018dfefb1aed5fcc8183305a1949ab59168a4f805b4f859b8d4abb0aa19d5350b9470b7e4294183d018170e370a50f3952ceb065205db3fc33e14948daed0c356cc17650a6c7a9419d7ee11733285d9eb5cad2707de7edd63077c83910eb31de24e59915023fbdd333f7e3e35274c9950f8040a4d6571439555b3a21d2788d20a3fdca53de945cd871b0259a628d9615216526851b256afba7af06012e061e0831b0b2518690ae131328d27ca09dcf341a435579cb6e4e24a6b9c75c7f4274bcac486648b2b1d63adc9e7aecaa650321e1e38f934db2cd86468a3d3bf7468a5b755aaf749570d84da015a1d83ccc336920871daf7d7dcff045fa0c4afc809b7950819dd93f1c57d4e61552acd3a7178057c69b7679a1728e909efb96cb5543a8fe9cf0cecf62c0a5c39b00bbcfbb8f5c074db648c3799d6fdd2d73b224a4a50efbf5fff9e0af0e71da9dba7630beab7d1626eea2c5dbe30ad253bff8ea06006d99368c8b76b2ba8178173c288d40abe7d384549db225e9aa4d2b7eb103e0e791afcee8a55ce3dcbd9d1b3fa5f64e6e4fc22b633663d9a1f9654e1b9c4112631034edda784c698b4de90f6e09e19c7809d54c2ca4a78ad10488d152c8053e91491902eda5af2f936a73497673141428f19a4f732c8f714dd425a595ded08c5fdee561b7aad0f595359535247690e159b2af36d831a5704e7e7dbcbf22bd325be89e6544a9c6d23ad0ac1be78744df3fe61ad12e48f3f7cb940c87b5549dc8ac7f8e76b819663b3688f04dd09becce536b8e86374e93186024c2f1eedb6f84f3a3bb39fbaddd9766f456925075bb1156ad99221682ecb275d0c335495a796389250cdd8fff406bb0f4fba8975d104b57322b05ae57bc0c5587a56f4054c3b611971411ac2e4467344c46ddd858be2b3cce107bad61a8679f5df2b2be2233f1e430644771869ec07756688473217662ad5186f7ac23b896395a9b7ef4a3a9e47b3befd5b50ac9c36875eaf82247674ca676a309f2047a97f041416bd13d3c8b5ab78c56e839e274889ddbb99387dd327c77235435cda782667decd07361bdc1fbd87718dca038082483c9ef603f60c7c62c8df248df5bd4ba2060c9846555e77ee39d7fb29793da5e01b3a6c6cddc043ce71529107ad2dad9ee30dc5f601f234594f6e046a00d84fb0d4f5e343247afba7adf4c30a6f4cf281ccf6cf4710217b4c075d3ce956a4e6b633ba3af167ea3d8554962ac73b726016accf287bd3c4a54fcf65e00274a363bd64dcba23ae96befc2e2b2808a9696bf34d3cd2781754ce0bfba2e1b2668a4f82e718e4cbeb54a1db7212f522916b65ea0f5ae1b40f115dca4c42641123213d8b870689cbd7e216c2e1b209dd24e239b76449a88bda48fabe4cfed3bcaf9ae64270e8530774eb7d13c07ade02a25e7c113c657d78a59c01c33a30b4dc2626d9295a5a9445f1cc5b86bcdc4c58fd1ff29b2644a4fe6af281e9781a5cc3a99dddd1064ecf45419abe61f1aec206f01b74b76728a4a2e4425844e92052816d33c90bc0428ecb2ac183f3d6626fb65b48ad90b00740a368a846093ce8b667b529a337da2cac8cba8c9816649b25fb9bc2b23a90aa3852ab1b5e8de8fc926a1921a42b471ce2bfc41584a47881c7b85c72ac83fd5373a155c6285fd0e08df65fb90e239f83d1c3c1795d018515513122169e4b89690dd2e128bbb3622d232edb14ededea5f9405dd43ad0f69d2ed176150ab3caee7c4c4b9fab331a9f06916123c28107c580440bb367d50f48b21222aa6051177fe90cbef3801e8a65977e5acd80a1b7d55c30c3765d34c636ee94a5c455aaa12720ea4af635aa77875219cf85a4e1136dece1c4d733da25d4c4a3bc38c55bfabe2eb51e5a01a7807f3f8ad25ffb97383f9eab3ee47c1bf3d39fe6922e7370b4e57420ea942ba9912516f2306be1f9426f2b5712279870b0855c7e6422bdc51ac98957598e90120fdf44cd7edf363bb6cd7111cab2c8633deeb55b304dca9b1197726b231aee9c57c8de7a6f2a849504c0a8e578d50e370e38a5fc57161f568cddcd43a9532a013a6e2577ed17eaa5f7b8f7977dfeca84cf72c1c1680aa05ff002f4acbac273fba9fc9e8f2c05587b42eb2a029ff617a209e001352bf2c63c2f3d904ff2a1269513d805f92d1f95b2eb682690c666f3d7c0fc6475e8d5eb878e3da4f9ebbe5755952fed078a1dbe0e30ae5eeeeb996dd5ab6483e82f3829dfbef027e2d0749a16d183ba480513178a892e3812a00a63d45756726925d55cf047e0aad0a718b67994705c8c87562a5e507cdb84bafa3de033558679f02760af75eed436887a92ec27265335cf816aec6f4e28fab17a664ef55cc27973455740e58fbc930ff07621999d8e51651ee5a42dc901062490da04f05a1ed1b277ab9f9a83022e1868917c7101d7b01beb58fd4c11c40281c88fa9bd4b574d6e7e350afef2fb0f7b9a3cf6db8c3c67286551e2b20fa8448e5a0fb57122dcc5e1bf376800f350243f6800e37b815e5b6bfcfcb31a00ae9b9755f42c52b13ba852018461fd58dac3e915f41155f4514e694a722d8bb2bb2f58caa18edad27a96a6b430a57bd90f5d778c13559c18a9e44e7f8956292136832828b2758df4b27fd1a9d5a87e7fed54bc49fae2698aa7b8b36d8c8a9142b4f1591e7d85ff0609546a44de7f072d3e9cb2e340553ac920fbafa541f26527ce2c5af531d9e4db41342f375b6ad3f20169d165af1899972b75ed4626a7c9b6fcca190fdd69f59a43b7aed8740289f389976f30435e88f17ec1e7c6dc15c6529d3afad84fc9076dff42247c1c9b552279c6d8fafb3866442b75c6db5d5eb3b8c66f417803323ac2e7b490a96c1b8d43d36fef5caef7f76edfba680decb2dd01ade6859ee0e62a966feea367a80bc1663d0739c2caafd8f566a458891fec8575768ea6670de80b1191ff24ed55122338e0bcf6f76709e4917a098acf93958c4456184d80e790a038b2a4f6abae701480295771d71761416e8b094268ff1d2503b935ea4c524aeb47bf3ba1d197262b5306a6d15b02fb5f01a1532044311963b3f3cf07c0deee4c2ab9d03e72a849be4aca4e2a45f412a3ae351b7dd3e3bb93331bb9940d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="消息平台" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E6%B6%88%E6%81%AF%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>装机-软件安装（Linux）</title>
    <link href="https://kiml.github.io/posts/dada24a1/"/>
    <id>https://kiml.github.io/posts/dada24a1/</id>
    <published>2024-09-12T05:59:25.000Z</published>
    <updated>2025-02-09T09:03:37.677Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>记录 Linux 安装教程</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-12 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><p>默认操作为 root 权限，权限不足命令前加 sudo</p><h2 id="MySQL">MySQL</h2><ol><li class="lvl-3"><p>MySQL 8.0.26 下载</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>解压缩文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>移动文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-8.0.26-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>创建数据存放目录</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span>到安装目录下</span></span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>创建用户组和用户</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>改变 mysql 目录权限</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/local/mysql/</span><br><span class="line"></span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>数据库初始化（<em>需要记住临时密码</em>）</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --initialize</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>修改 my.cnf 文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内内容</span></span><br><span class="line">[mysqld]</span><br><span class="line">    basedir = /usr/local/mysql</span><br><span class="line">    datadir = /usr/local/mysql/data</span><br><span class="line">    socket = /usr/local/mysql/mysql.sock</span><br><span class="line">    character-set-server=utf8</span><br><span class="line">    port = 3306</span><br><span class="line">   sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"> [client]</span><br><span class="line">   socket = /usr/local/mysql/mysql.sock</span><br><span class="line">   default-character-set=utf8</span><br></pre></td></tr></table></figure><ol start="9"><li class="lvl-3"><p>创建 mysql 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 mysql.server 启动文件复制到 /etc/init.d 目录</span></span><br><span class="line">cp -a /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予权限</span></span><br><span class="line">chmod +x /etc/rc.d/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 mysql 服务</span></span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查服务是否生效</span></span><br><span class="line">chkconfig --list mysqld</span><br></pre></td></tr></table></figure><ol start="10"><li class="lvl-4"><p>配置全局环境</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下配置</span></span><br><span class="line">export PATH=$PATH:/usr/local/mysql/bin:/usr/local/mysql/lib</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量设置生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="11"><li class="lvl-4"><p>启动 mysql 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line">service mysql status</span><br></pre></td></tr></table></figure><ol start="12"><li class="lvl-4"><p>登录 mysql 修改密码</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码为之前的临时密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ol start="13"><li class="lvl-4"><p>设置 mysql 远程登录</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 允许任何主机使用 root 进行连接</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 创建一个允许远程访问的 MySQL 账户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;your_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_password&#x27;</span>; </span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;your_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Redis">Redis</h2><ol><li class="lvl-3"><p>源码安装与编译</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class="line">tar -xzvf redis-stable.tar.gz</span><br><span class="line">cd redis-stable</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>执行完 make 命令后，src 目录下会出现编译后的 redis 服务程序 <code>redis-server</code>，还有用于测试的客户端程序 <code>redis-cli</code>，两个程序位于安装目录 src 目录下</p><ol start="2"><li class="lvl-3"><p>安装可执行程序到 <code>/usr/local/bin</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>前台运行启动</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定配置文件启动</span></span><br><span class="line">cp redis.conf /etc/redis.conf</span><br><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>其他命令</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash"><span class="built_in">set</span> foo bar</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">get foo</span></span><br><span class="line">&quot;bar&quot;</span><br><span class="line"></span><br><span class="line">redis-cli shutdown</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接关闭不保存内存</span></span><br><span class="line">redis-cli shutdown nosave</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>配置 Redis 为后台服务将配置文件中的 daemonize no 改成 daemonize yes，配置 redis 为后台启动。</p></li><li class="lvl-3"><p>Redis 设置访问密码在配置文件中找到 requirepass，去掉前面的注释，并修改后面的密码。</p></li><li class="lvl-3"><p>设置远程可访问</p></li></ol><p>在配置文件中找到 bind 127.0.0.1 这一行，注释。</p><p><strong>如果 redis3.2 版本以上的，需要将保护模式（protected-mode）修改成 no</strong></p><ol start="8"><li class="lvl-3"><p>常用的配置文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#默认端口6379</span><br><span class="line">port 6379</span><br><span class="line">#绑定ip，如果是内网可以直接绑定 127.0.0.1, 或者忽略, 0.0.0.0是外网</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">#守护进程启动</span><br><span class="line">daemonize yes</span><br><span class="line">#超时</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">#分区</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression yes</span><br><span class="line">#存储文件</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">#密码 abcd123</span><br><span class="line">requirepass abcd123</span><br></pre></td></tr></table></figure><h2 id="Docker-和-Docker-compose">Docker 和 Docker-compose</h2><ol><li class="lvl-3"><p>安装 GCC 相关的环境</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line"></span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>安装 Docker 需要的依赖软件包</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>设置国内的镜像</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>更新 yum 软件包索引</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>安装 DOCKER CE(注意：Docker 分为 CE 版和 EE 版，一般我们用 CE 版就够用了)</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>启动 Docker</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>下载 Docker Compose 的当前稳定版本</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>将可执行权限应用于二进制文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="9"><li class="lvl-3"><p>创建软链</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br></pre></td></tr></table></figure><ol start="10"><li class="lvl-4"><p>测试是否安装成功</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h2 id="Minio"><a class="link"   href="https://min.io/" >Minio<i class="fas fa-external-link-alt"></i></a></h2><ol><li class="lvl-3"><p>服务器安装</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">MINIO_ROOT_USER=admin MINIO_ROOT_PASSWORD=password ./minio server /mnt/data --console-address &quot;:9001&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>客户端安装</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc </span><br><span class="line">chmod +x mc mc alias </span><br><span class="line">set myminio/ http://MINIO-SERVER MYUSER MYPASSWORD</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;记录 Linux 安装教程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-12 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Linux" scheme="https://kiml.github.io/tags/Linux/"/>
    
    <category term="工具" scheme="https://kiml.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>消息平台-项目介绍</title>
    <link href="https://kiml.github.io/posts/2b76eac7/"/>
    <id>https://kiml.github.io/posts/2b76eac7/</id>
    <published>2024-09-10T08:01:13.000Z</published>
    <updated>2024-11-05T02:41:36.437Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>新项目学习笔记。<br>项目 git 地址：<a class="link"   href="https://gitee.com/zhongfucheng/austin.git" >https://gitee.com/zhongfucheng/austin.git<i class="fas fa-external-link-alt"></i></a><br>前端项目 git 地址：<a class="link"   href="https://gitee.com/zhongfucheng/austin-admin" >https://gitee.com/zhongfucheng/austin-admin<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-10 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="项目概述">项目概述</h2><p>austin 项目是消息推送平台的实现，它的<strong>核心功能</strong>：统一的接口发送各种类型消息，对消息生命周期全链路追踪</p><h2 id="系统项目架构">系统项目架构</h2><table><thead><tr><th>工程模块</th><th>作用</th></tr></thead><tbody><tr><td>austin-common</td><td>项目公共包：存储着项目公共常量/枚举/Bean</td></tr><tr><td>austin-support</td><td>项目工具包：对接 中间件/组件</td></tr><tr><td>austin-cron</td><td>定时任务模块：对 xxl-job 封装和项目定时任务逻辑</td></tr><tr><td>austin-web</td><td>后台管理模块：提供接口给前端调用</td></tr><tr><td>austin-service-api</td><td>消息接入层接口定义模块：只有接口和必要的入参依赖</td></tr><tr><td>austin-service-api-impl</td><td>消息接入层具体实现模 块： 真实处理请求</td></tr><tr><td>austin-handler</td><td>消息处理逻辑层：消费 MQ 下发消息</td></tr><tr><td>austin-stream</td><td>实时处理模块：利用 flink 实时处理下发链路数据</td></tr><tr><td>austin-data-house</td><td>数据仓库模块：消费 MQ 数据写入 hive</td></tr></tbody></table><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/09/austin%E6%B5%81%E7%A8%8B%E5%9B%BE.png"                        alt=""                 ></p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;新项目学习笔记。&lt;br&gt;
项目 git 地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/zhongfucheng/austin.git&quot; &gt;https://gitee.com/zhongfucheng/austin.git&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
前端项目 git 地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/zhongfucheng/austin-admin&quot; &gt;https://gitee.com/zhongfucheng/austin-admin&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-10 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="消息平台" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E6%B6%88%E6%81%AF%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins + k8s 实现 CICD（持续集成和持续部署）</title>
    <link href="https://kiml.github.io/posts/60f8da4b/"/>
    <id>https://kiml.github.io/posts/60f8da4b/</id>
    <published>2024-08-25T12:31:20.000Z</published>
    <updated>2025-03-04T13:39:19.111Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3aa89e11161cd4f1e2b86df4efa6dc1b1a69775de0815f16150360217ac98037"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Jenkins" scheme="https://kiml.github.io/tags/Jenkins/"/>
    
    <category term="Kubernetes" scheme="https://kiml.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>面试 MQ</title>
    <link href="https://kiml.github.io/posts/a872196e/"/>
    <id>https://kiml.github.io/posts/a872196e/</id>
    <published>2024-08-22T03:39:33.000Z</published>
    <updated>2024-08-24T15:03:10.049Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="你知道目前市面上使用的-MQ-有哪些吗？">你知道目前市面上使用的 MQ 有哪些吗？</h2><p>RabbitMQ、RocketMQ、Kafka。</p><h3 id="你使用的是哪种-MQ？为什么选择这类-MQ-qps-？">你使用的是哪种 MQ？为什么选择这类 MQ(qps)？</h3><p>我们选用的是 RabbitMQ，它并发能力强，性能好，延时低，管理界面也很丰富，只是吞吐量较低，但对于不是特别依赖大数据的项目来说，选用 RabbitMQ 已经足够用了。</p><p>RocketMQ 是阿里开源项目，吞吐量是最高的（10 万次级），但免费版的 MQ 是阉割版的，容易出问题。</p><p>Kafka 吞吐量很大（10 万次级），但它不是真正的 MQ，只是类似 MQ 的产品，它只支持主要 MQ 功能，比如它不具有消息确认机制。</p><h3 id="什么是-RabbitMQ？">什么是 RabbitMQ？</h3><p>RabbitMQ 是一款开源的，Erlang 编写的，基于 AMQP 协议的消息中间件。</p><h4 id="什么是-AMQP-协议？">什么是 AMQP 协议？</h4><p>AMQP 一个提供统一消息服务的应用层标准高级消息队列的链接协议，RabbitMQ 是主要根据 AMQP 协议进行数据通信和传输的。有点类似于 HTTP 协议。</p><h4 id="AMPQ-与-JMS-有什么区别知道吗？">AMPQ 与 JMS 有什么区别知道吗？</h4><p>JMS 是定义了统一的接口（API），来对消息操作进行统一；AMQP 是通过规定协议来统一数据交互的格式。</p><p>JMS 限定了必须使用 Java 语言；AMQP 只是协议，不规定实现方式，因此是跨语言的。</p><p>JMS 规定了两种消息模式；而 AMQP 的消息模式更加丰富。</p><h2 id="你使用的是-SpringCloud，Feign-可以进行远程调用，为什么还要中间加一个-MQ-呢？">你使用的是 SpringCloud，Feign 可以进行远程调用，为什么还要中间加一个 MQ 呢？</h2><p>为了解耦，如果没有中间件进行处理，那两个系统之间的关系过于紧密，一方改动，另一方也必须改动。</p><h3 id="MQ-有哪些优势？">MQ 有哪些优势？</h3><ol><li class="lvl-3"><p><strong>应用解耦（核心）：降低系统的耦合性，提升可维护性。</strong><br>场景：服务调用之间都可以考虑 MQ。</p></li><li class="lvl-3"><p><strong>异步提速：提升用户体验和系统吞吐量。</strong><br>场景：发送订单消息、发送短信消息等。</p></li><li class="lvl-3"><p><strong>削峰填谷：减少高峰时期对服务器的压力。</strong><br>场景：秒杀活动、限时定购等。</p></li></ol><h2 id="RabbitMQ-有什么缺点？">RabbitMQ 有什么缺点？</h2><ol><li class="lvl-3"><p><strong>系统可用性降低</strong><br>本来系统运行好好的，现在你非要加入个消息队列进去，那消息队列挂了，你的系统不是呵呵了。因此，系统可用性会降低。</p></li><li class="lvl-3"><p><strong>系统复杂度提高</strong><br>加入了消息队列，要多考虑很多方面的问题，比如：一致性问题、如何保证消息不被重复消费、如何保证消息可靠性传输等。因此，需要考虑的东西更多，复杂性增大。</p></li><li class="lvl-3"><p><strong>一致性问题</strong><br>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p></li><li class="lvl-3"><p><strong>消息顺序问题</strong><br>如果有 A、B 两个消息，B 消息被消费者消费的前提是 A 消息已被执行，这时候就不能先执行 B，得先执行 A 才行。</p></li></ol><h3 id="那怎么解决以上缺点呢？">那怎么解决以上缺点呢？</h3><ol><li class="lvl-3"><p><strong>系统可用性降低：集群模式保证高可用。</strong><br>镜像集群模式：这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</p></li><li class="lvl-3"><p><strong>系统复杂度提高</strong><br>加入 Rabbit 确实会增加系统复杂度，但 MQ 的解耦、提速、削峰这些方面的收益超过管理 MQ 的成本，所以该用还得用。</p></li><li class="lvl-3"><p><strong>一致性问题</strong><br>RabbitMQ 分布式消息是最终一致性的，即使可能因为消息失败而导致前后消息不一致，但分布式系统是在不同服务器上的，不能像简单的本地回滚一样，所以它通过发送延迟消息和定时消息来进行消息补偿，保证最终消息是一致性的，即是一个完整的事务。<br>RabbitMQ 本身是有事务的功能的，但是分布式的事务处理效率太低，且发生问题的可能性不高，所以多是选择放弃强一致性，而采用最终一致性。</p></li><li class="lvl-3"><p><strong>消息顺序问题</strong><br>在 MQ 中将有顺序要求的 AB 两个消息分别用两个队列与两个消费端手工 ack 接收，并且在消息上需要有对应的同组编号信息，以及发送次数，如果 B 执行的前提是已经消费了 A，那需要在消费端判断 A 消息是否已经正确接收（也就是查询成功的消息库）。如果 A 已经消费成功，则消费 B，如果 A 消费失败，或者 A 还没有消费，则 B 消息也直接返回为消息失败，并且不重回队列。并且让消息提供方重新发送 AB 消息，如果连续三次发送消息仍然消费失败，则 AB 两个消息第四次处理时就扔入死信队列中，等待人工处理。</p></li></ol><h3 id="RabbitMQ-事务是怎么实现的？">RabbitMQ 事务是怎么实现的？</h3><p>事务的实现主要是对信道（Channel）的设置，主要的方法有三个：</p><ol><li class="lvl-3"><p>channel.txSelect() 声明启动事务模式；</p></li><li class="lvl-3"><p>channel.txComment() 提交事务；</p></li><li class="lvl-3"><p>channel.txRollback() 回滚事务；</p></li></ol><h2 id="RabbitMQ-的实现原理是怎么样子的？">RabbitMQ 的实现原理是怎么样子的？</h2><p>首先，消息提供方会和 RabbitMQ 之间建立起 TCP 连接（Connection），每个连接中会有多个通信的信道（channel）来提连通信效率，不同的信道之间通过信道 id 来实现信息隔离。</p><p>而在 RabbitMQ 中，消息提供者发出的消息会先到 RabbitMQ 中的交换机中，由交换机根据分发规则，通过队列的形式分发消息。</p><p>消息接收方与 RabbitMQ 之间也一样是通过 TCP 连接和信道建立连接和通信。</p><p>此外，在 RabbitMQ 中，交换机与队列之间不同的边接方式，也产生了不同的工作模式。</p><h3 id="RabbitMQ-有哪些工作模式？">RabbitMQ 有哪些工作模式？</h3><ol><li class="lvl-3"><p>简单模式：就是不通过交换机，消息直接通过队列，一对一收发。</p></li><li class="lvl-3"><p>工作队列模式：也是不通过交换机，消息直接通过队列，只是一个发送方可以有多个接收端。</p></li><li class="lvl-3"><p>发布订阅模式：由交换机分发消息到不同队列，每个消费者只监听自己的队列。</p></li><li class="lvl-3"><p>路由模式：由交换机分发消息，但是发送方需要指定路由 key，交换机会根据不同的 routing key 分发给不同的队列，消费方对应自己需要的队列。</p></li><li class="lvl-3"><p>通配符模式：和路由模式有些相近，只是通配符模式可以在绑定 routing key 时使用通配符。</p></li><li class="lvl-3"><p>RPC 模式：RPC 远程调用模式，严格来说不太算是 MQ。</p></li></ol><h4 id="为什么-RPC-严格来说不能算是-MQ？">为什么 RPC 严格来说不能算是 MQ？</h4><p>RPC，远程过程调用，实际上是一种技术思想，而一种规范或协议，一般来说 RPC 远程调用是同步通信的，且 RPC 模式是没有队列的，多用在立即等待返回处理结果的场景，比如使用基于 RPC 思想的 Dubbo。而 MQ 是用来异步提速的，所以严格来说，RPC 模式不能算是 MQ。</p><h4 id="消息怎么路由？">消息怎么路由？</h4><ul class="lvl-0"><li class="lvl-2"><p>消息提供方 -&gt;路由 -&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；</p></li><li class="lvl-2"><p>常用的交换器主要分为一下三种：</p><ul class="lvl-2"><li class="lvl-6">fanout：如果交换器收到消息，将会广播到所有绑定的队列上。</li><li class="lvl-6">direct：如果路由键完全匹配，消息就被投递到相应的队列。</li><li class="lvl-6">topic：可以使来自不同源头的消息能够到达同一个队列。 使用 topic 交换器时，可以使用通配符。</li></ul></li></ul><h4 id="消息基于什么传输？">消息基于什么传输？</h4><p>由于 TCP 连接的创建和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈。RabbitMQ 使用信道的方式来传输数据。信道是建立在真实的 TCP 连接内的虚拟连接，且每条 TCP 连接上的信道数量没有限制。</p><h2 id="RabbitMQ-中的交换机可以储存消息吗？">RabbitMQ 中的交换机可以储存消息吗？</h2><p>不可以。交换机只负责转发消息，不具备存储消息的能力。</p><h2 id="如何防止消息丢失呢？">如何防止消息丢失呢？</h2><ol><li class="lvl-3"><p>在生产者丢失——confirm 确认模式</p><ol><li class="lvl-7">使用 RabbitMQ 事务机制，但它是同步的，且很耗性能。</li><li class="lvl-7">开启 confirm 确认模式，确认消息是否从“生产者”发送到“交换机”，成功回传 ack 消息，失败可以重试或抛异常。且 confirm 模式是异步回调接口通知 MQ 是否接收到消息。一般都采用这种方式。</li></ol></li><li class="lvl-3"><p>在 MQ 中丢失——持久化</p><ol><li class="lvl-7">开启 RabbitMQ 持久化，防止 RabbitMQ 自己弄丢数据。除非极小概率还没来得及持久化，MQ 就先挂了，即使这样，也只会丢失极少的数据量。</li><li class="lvl-7">所以，持久化可以跟生产者那边的 confirm 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 ack 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 ack，你也是可以自己重发的。</li><li class="lvl-7">但持久化的过程也是很耗性能的。</li></ol></li><li class="lvl-3"><p>在消费者丢失——ack 机制</p><ol><li class="lvl-7">用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。以上三种方式，只是防止丢失，但具体补消息，还需要靠消息的补偿机制（也就是消息的可靠性保证）。</li></ol></li></ol><h2 id="❗RabbitMQ-如何保证消息的可靠性呢？">❗RabbitMQ 如何保证消息的可靠性呢？</h2><p>消息补偿。（延迟消息 + 定时扫描）</p><ul class="lvl-0"><li class="lvl-2"><p>由生产者发送消息给 MQ，MQ 会将消息给到消费者，消息者收到消息后，会返回一个消息确认，这个“消息确认”会被 MQ 放到“回调检查服务”中，“回调检查服务”会将收到的消息给到定时检查的 MDB。</p></li><li class="lvl-2"><p>但在这个过程中，如果出现异常或者网络波动，就会导致消息到不了回调检查服务，所以为了保证能够消息可靠性，会由生产者延迟一段时间后，再发送一个相同的消息给 MQ，这个消息会直接被 MQ 发送到回调检查服务。</p></li><li class="lvl-2"><p>回调检查服务会将延迟发送的消息和 MDB 中的消息对比，如果 MDB 中没有该消息，就会调用生产者，让生产者重新发送消息。</p></li><li class="lvl-2"><p>但在以上过程，还可能出现“延迟发送消息”也出问题，为了更深层保证消息的可靠性，还需要一个定时检查服务，每隔一段固定时间，定时检查服务会将 MDB 里的消息和 DB 中的消息进行匹配（检查某个时间段的表，而不是全表扫描），如果有 MDB 缺失的消息，就会调用生产者重新发送消息。</p></li></ul><h2 id="什么是-TTL？什么是死信队列，消息成为死信有哪几种情况？什么是延迟队列？">什么是 TTL？什么是死信队列，消息成为死信有哪几种情况？什么是延迟队列？</h2><ul class="lvl-0"><li class="lvl-2"><p>TTL：全称 Time To Live（存活时间/过期时间）</p><ol><li class="lvl-7">如果给消息设置过期时间，即使到了过期时间，消息也不会立马被清除，只有等消息到了队列的头上，才会被判断是否过期清除。</li><li class="lvl-7">如果给整个队列设置过期时间，即每一个进入队列的消息，都会各自被设置为了相同的过期时间。而非整个队列定时隔一段时间清除。</li><li class="lvl-7">如果单独消息和整个队列两则都设置了过期时间，以时间短的为准。</li></ol></li><li class="lvl-2"><p>死信队列：英文缩写：DLX  。Dead Letter Exchange（死信交换机）</p><ul class="lvl-2"><li class="lvl-6">消息成为死信的三种情况：<ol><li class="lvl-11">队列消息长度到达限制；</li><li class="lvl-11">消费者拒接消费消息，basicNack/basicReject,并且不把消息重新放入原目标队列，requeue=false；</li><li class="lvl-11">原队列存在消息过期设置，消息到达超时时间未被消费；</li></ol></li></ul></li><li class="lvl-2"><p>延迟队列：即消息进入队列后不会立即被消费，只有到到达指定时间后，才会被消费。</p><ul class="lvl-2"><li class="lvl-6">RabbitMQ 中并未提供延迟队列功能，采用【TTL】+【死信队列】 组合实现延迟队列的效果。</li></ul></li></ul><h2 id="有几百万消息持续积压几小时，说说怎么解决？">有几百万消息持续积压几小时，说说怎么解决？</h2><p>消息积压处理办法：临时紧急扩容：</p><p>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</p><p>临时建立好原先 10 倍的 queue 数量。</p><p>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</p><p>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</p><p>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</p><h2 id="消息队列满了以后该怎么处理">消息队列满了以后该怎么处理</h2><p>没办法了，说明紧急扩容也来不及了，只能“丢弃 + 批量重导”了，写程序快速消费，然后重导。</p><h2 id="RabbitMQ-如何保证消息的不重复消费呢？【重要】">RabbitMQ 如何保证消息的不重复消费呢？【重要】</h2><p>一条数据重复出现两次，数据库里就只有一条数据，这就是保证了系统的幂等性。</p><p>保障了消息的幂等性，同一条消息被重复消费也就不影响了，因为不影响最终执行结果。</p><ol><li class="lvl-3"><p>方法一：采用乐观锁机制保证消息幂等性。在数据库中会增加一个版本字段，执行时也会匹配版本，如果版本不一致，SQL 语句的匹配就不成立，就不会执行。</p></li><li class="lvl-3"><p>方法二：你拿到这个消息做数据库的 insert 操作，那就容易了，给这个消息做一个唯一的主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</p></li><li class="lvl-3"><p>方法三：你拿到这个消息做 redis 的 set 的操作，那就容易了，不用解决，因为你无论 set 几次结果都是一样的，set 操作本来就算幂等操作。</p></li><li class="lvl-3"><p>方法四：如果上面两种情况还不行，上大招。准备一个第三方介质，来做消费记录。以 redis 为例，给消息分配一个全局 id，只要消费过该消息，将 <code>&lt;id,message&gt;</code> 以 K-V 形式写入 redis。那消费者开始消费前，先去 redis 中查询有没有消费记录即可，先根据这个 id 去比如 redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</p></li></ol><h2 id="如何解决消息队列的延时以及过期失效问题？">如何解决消息队列的延时以及过期失效问题？</h2><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。</p><p>我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上 12 点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据（发送的数据库和确认接收的数据库匹配），写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><h2 id="如果要你自己设计一个-MQ，你会怎么设计？">如果要你自己设计一个 MQ，你会怎么设计？</h2><ol><li class="lvl-3"><p>重启起一个服务器来（使用 Redis）充当 RabbitMQ，实现 MQ 的解耦功能。</p></li><li class="lvl-3"><p>这个服务器需要可以存储和转发消息，存储是为了实现永久化，防止服务器出问题，消息丢失；转发消息则是可以通过不同队列来实现指定消费端，实现异步提速功能和削峰填谷的功能。</p></li><li class="lvl-3"><p>建立消息补尝机制，防止消息丢失。</p></li></ol><h3 id="怎么使用-Redis-实现-MQ-功能呢？">怎么使用 Redis 实现 MQ 功能呢？</h3><ol><li class="lvl-3"><p>使用 list 类型保存数据信息，rpush 生产消息，lpop 消费消息，当 lpop 没有消息时，可以 sleep 一段时间，然后再检查有没有信息，如果不想 sleep 的话，可以使用 blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis 可以通过 pub/sub 主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p></li><li class="lvl-3"><p>使用 sortedset，使用时间戳做 score, 消息内容作为 key，调用 zadd 来生产消息，消费者使用 zrangbyscore 获取 n 秒之前的数据做轮询处理。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>跨域产生的原因及解决方案</title>
    <link href="https://kiml.github.io/posts/f5b0876a/"/>
    <id>https://kiml.github.io/posts/f5b0876a/</id>
    <published>2024-08-22T01:19:30.000Z</published>
    <updated>2024-08-22T15:51:14.653Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>面试必会，总结一下</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="跨域的原因">跨域的原因</h2><p>跨域是是因为浏览器的同源策略限制，是浏览器的一种安全机制，服务端之间是不存在跨域的。</p><p>所谓同源指的是两个页面具有相同的协议、主机和端口，三者有任一不相同即会产生跨域。</p><h2 id="跨域举例">跨域举例</h2><table><thead><tr><th>当前页面 url</th><th>被请求页面 url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="http://www.test.com/index.html" >http://www.test.com/index.html<i class="fas fa-external-link-alt"></i></a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="https://www.test.com/index.html" >https://www.test.com/index.html<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>协议不同</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="http://www.baidu.com/" >http://www.baidu.com/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>主域名不同</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="http://blog.test.com/" >http://blog.test.com/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>子域名不同</td></tr><tr><td><a class="link"   href="http://www.test.com:8080/" >http://www.test.com:8080/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="http://www.test.com:7071/" >http://www.test.com:7071/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>端口号不同</td></tr></tbody></table><h2 id="跨域的解决办法">跨域的解决办法</h2><p>以下跨域解决方式选择一种，重复配置不会生效。</p><h3 id="Java-配置">Java 配置</h3><blockquote><ol><li class="lvl-3"><p>使用 @CrossOrigin 注解实现跨域【局域类跨域】（一般不用，没有记录）</p></li><li class="lvl-3"><p>通过配置文件实现跨域【全局跨域】</p></li><li class="lvl-3"><p>通过 CorsFilter 对象实现跨域【全局跨域】</p></li><li class="lvl-3"><p>通过 Response 对象实现跨域【局域方法跨域】（一般不用，没有记录）</p></li><li class="lvl-3"><p>通过实现 ResponseBodyAdvice 实现跨域【全局跨域】（一般不用，没有记录）</p></li></ol></blockquote><ol><li class="lvl-3"><p>通过配置文件实现跨域（重写 WebMvcConfigurer）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;PATCH&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>返回新的 CorsFilter（跨域配置）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 添加 CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 放行哪些请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行哪些原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 暴露哪些头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,config);</span><br><span class="line">        <span class="comment">//3. 返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-配置">Nginx 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  your_domain.com;</span><br><span class="line">    location /api &#123;</span><br><span class="line">        # 允许跨域请求的域名，* 表示允许所有域名访问</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的方法</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的自定义 Header</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Origin, X-Requested-With, Content-Type, Accept&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的 Credential</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line"></span><br><span class="line">        # 预检请求的存活时间，即 Options 请求的响应缓存时间</span><br><span class="line">        add_header &#x27;Access-Control-Max-Age&#x27; 3600;</span><br><span class="line"></span><br><span class="line">        # 处理预检请求</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 其他配置...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gateway-网关配置">Gateway 网关配置</h3><blockquote><ol><li class="lvl-3"><p>通过在配置文件中配置跨域实现。</p></li><li class="lvl-3"><p>通过在框架中添加 CorsWebFilter 来解决跨域问题。</p></li></ol></blockquote><ol><li class="lvl-3"><p>通过在配置文件中配置跨域实现。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="attr">gateway:</span>  </span><br><span class="line">  <span class="attr">globalcors:</span>  </span><br><span class="line">    <span class="attr">cors-configurations:</span>  </span><br><span class="line">      <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求  </span></span><br><span class="line">        <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span>  </span><br><span class="line">        <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域  </span></span><br><span class="line">        <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法  </span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">GET</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">POST</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">PUT</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">DELETE</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">OPTIONS</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>通过在框架中添加 CorsWebFilter 来解决跨域问题。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Spring-Framework 从 5.3 版本之前，使用以下代码可以让 Spring Cloud Gateway 网关允许跨域：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 这里仅为了说明问题，配置为放行所有域名，生产环境请对此进行修改</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求类型，有 GET, POST, PUT, DELETE, OPTIONS</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 暴露头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 是否允许发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>); </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而 Spring-Framework 5.3 版本之后，关于 CORS 跨域配置类 CorsConfiguration 中将 addAllowedOrigin 方法名修改为 addAllowedOriginPattern，因此配置了变成了以下这样：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 这里仅为了说明问题，配置为放行所有域名，生产环境请对此进行修改</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求类型，有 GET, POST, PUT, DELETE, OPTIONS</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 暴露头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 是否允许发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>); </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
面试必会，总结一下&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
  </entry>
  
  <entry>
    <title>【代码模板】延时任务</title>
    <link href="https://kiml.github.io/posts/f6ca592/"/>
    <id>https://kiml.github.io/posts/f6ca592/</id>
    <published>2024-08-18T13:40:41.000Z</published>
    <updated>2024-08-19T00:28:47.072Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言</p></li></ul><blockquote><p>业务场景：<br>1、生成订单 30 分钟未支付，则自动取消（延时任务）<br>2、生成订单 60 秒后，给用户发短信（延时任务）<br>…</p></blockquote><ul class="lvl-0"><li class="lvl-2">更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-18 初始记录（从原先的笔记进行搬运）</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="定时任务与延时任务的区别">定时任务与延时任务的区别</h2><ul class="lvl-0"><li class="lvl-2"><p>定时任务有明确的触发时间，延时任务没有</p></li><li class="lvl-2"><p>定时任务有执行周期，而延时任务在某事件触发后一段时间内执行，没有执行周期</p></li><li class="lvl-2"><p>定时任务一般执行的是批处理操作是多个任务，而延时任务一般是单个任务</p></li></ul><h2 id="解决思路">解决思路</h2><h3 id="数据库定时轮询（定时任务）">数据库定时轮询（定时任务）</h3><blockquote><p>通常在小型项目中使用，即通过一个线程定时的去扫描数据库，通过订单时间来判断是否有超时的订单，然后进行 update 或 delete 等操作。</p></blockquote><h4 id="实现">实现</h4><p>通过 springBoot 中的@Schedule 进行实现</p><h4 id="步骤">步骤</h4><ol><li class="lvl-3"><p>在启动类上添加注解@EnableScheduling</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableScheduling</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleAppcation</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(ScheduleAppcation.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在目标类上添加注解</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标任务执行完后，延迟10s执行。</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 10 * 1000)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob01</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cron表达式</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 6 * * ?&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob01</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>存在延时，定时任务默认是单线程执行，前一个任务阻塞会影响后一个任务的执行</p></li><li class="lvl-2"><p>数据库数据量大的情况下，扫描损耗巨大</p></li></ul><h3 id="JDK-的延迟队列">JDK 的延迟队列</h3><blockquote><p>该方案是利用 JDK 自带的 DelayQueue 来实现，这是一个无界阻塞队列，该队列只有在延迟期满的时候才能从中获取元素，放入 DelayQueue 中的对象，是必须实现 Delayed 接口的。</p></blockquote><p>DelayQueue 属于排序队列，它的特殊之处在于队列的元素必须实现 Delayed 接口，该接口需要实现 compareTo 和 getDelay 方法</p><p><strong>getDelay 方法</strong>：获取元素在队列中的剩余时间，只有当剩余时间为 0 时元素才可以出队列。</p><p><strong>compareTo 方法</strong>：用于排序，确定元素出队列的顺序。</p><h4 id="实现-2">实现</h4><p>利用 JDK 自带的 DelayQueue 来实现</p><h4 id="步骤-2">步骤</h4><ol><li class="lvl-3"><p>在测试包 jdk 下创建延迟任务元素对象 DelayedTask，实现 compareTo 和 getDelay 方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedTask</span>  <span class="keyword">implements</span> <span class="title class_">Delayed</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务的执行时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">executeTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelayedTask</span><span class="params">(<span class="type">int</span> delay)</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,delay);</span><br><span class="line">        <span class="built_in">this</span>.executeTime = (<span class="type">int</span>)(calendar.getTimeInMillis() /<span class="number">1000</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素在队列中的剩余时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="keyword">return</span> executeTime - (calendar.getTimeInMillis()/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed o)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">val</span> <span class="operator">=</span> <span class="built_in">this</span>.getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);</span><br><span class="line">        <span class="keyword">return</span> val == <span class="number">0</span> ? <span class="number">0</span> : ( val &lt; <span class="number">0</span> ? -<span class="number">1</span>: <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在 main 方法中创建 DelayQueue 并向延迟队列中添加三个延迟任务</p></li><li class="lvl-3"><p>循环的从延迟队列中拉取任务</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">DelayQueue&lt;DelayedTask&gt; queue = <span class="keyword">new</span> <span class="title class_">DelayQueue</span>&lt;DelayedTask&gt;();</span><br><span class="line"></span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">5</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">10</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(System.currentTimeMillis()/<span class="number">1000</span>+<span class="string">&quot; start consume &quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(queue.size() != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">DelayedTask</span> <span class="variable">delayedTask</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"><span class="keyword">if</span>(delayedTask !=<span class="literal">null</span> )&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()/<span class="number">1000</span>+<span class="string">&quot; cosume task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每隔一秒消费一次</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-2">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>数据存储在内存中，容易出现 OOM（Out Of Memory）异常</p></li><li class="lvl-2"><p>服务器宕机后，内存中的数据容易丢失</p></li></ul><h3 id="Redis-缓存">Redis 缓存</h3><h4 id="实现-3">实现</h4><p>利用 Redis 中 Key 的过期时间</p><h4 id="步骤-3">步骤</h4><ol><li class="lvl-3"><p>给 Redis 中 Key 设置过期时间</p></li><li class="lvl-3"><p>监听 Redis 中 Key 过期事件</p></li><li class="lvl-3"><p>获取过期 Key 对应的值进行消费</p><ul class="lvl-2"><li class="lvl-6">过期 Key 拿不到值<ul class="lvl-4"><li class="lvl-10">可以把信息存储到 Key 上（监听事件可以获取到即将过期的 key，可以将文章 id 存储到 redis 中）</li><li class="lvl-10">存储一份不过期的对应 Key，在 Key 过期时获取这个不过期 Key 取值再删除</li></ul></li></ul></li></ol><h4 id="优缺点-3">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>若 Redis 监听过期 Key 的微服务是多个集群时，只能有一个微服务处理，需要引入分布式锁，性能会下降。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.redislock;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLockImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Integer&gt; threadLocalInteger = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (threadLocal.get() == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">threadLocal.set(uuid);</span><br><span class="line">isLocked = stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">isLocked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重入次数加1</span></span><br><span class="line"><span class="keyword">if</span> (isLocked) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> threadLocalInteger.get() == <span class="literal">null</span> ? <span class="number">0</span> : threadLocalInteger.get();</span><br><span class="line">threadLocalInteger.set(count++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isLocked;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line"><span class="comment">// 判断当前线程所对应的uuid是否与Redis对应的uuid相同，再执行删除锁操作</span></span><br><span class="line"><span class="keyword">if</span> (threadLocal.get().equals(stringRedisTemplate.opsForValue().get(key))) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> threadLocalInteger.get();</span><br><span class="line"><span class="comment">// 计数器减为0时才能释放锁</span></span><br><span class="line"><span class="keyword">if</span> (count == <span class="literal">null</span> || --count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-MQ-实现延时任务">使用 MQ 实现延时任务</h3><h4 id="实现-4">实现</h4><blockquote><p>内链：[[消息队列的选型与优缺点]]<br>外链：<a class="link"   href="https://kiml.site/posts/359ee88a/" >消息队列的选型与优缺点<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="优缺点-4">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>高效，可以利用 MQ 的分布式特性轻易的进行横向扩展，消息支持持久化增加了可靠性。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;业务场景：&lt;br&gt;
1、生成订单 30 分钟未支付，则自动取消（延时任务）&lt;br&gt;
2、生成订单 60 秒后，给用户发短信（延时任务）&lt;br&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-18 初始记录（从原先的笔记进行搬运）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Freemarker 基础</title>
    <link href="https://kiml.github.io/posts/e9ae925d/"/>
    <id>https://kiml.github.io/posts/e9ae925d/</id>
    <published>2024-07-23T13:26:20.000Z</published>
    <updated>2025-04-07T09:44:34.643Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Java 开发的模板引擎。官网模板：<a class="link"   href="https://freemarker.apache.org/docs/dgui_quickstart_basics.html" >Template + data-model = output - Apache FreeMarker Manual<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-23 初始记录</span><br><span class="line">24-07-26 bug记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="快速入门">快速入门</h2><p>freemarker 作为 Spring MVC 一种视图格式，默认情况下 SpringMVC 支持 freemarker 视图格式。</p><h3 id="Maven-依赖">Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父工程指定SpringBoot版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># freemarker基本配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span></span><br><span class="line">    <span class="string">content‐type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="string">add‐mappings:</span> <span class="literal">false</span> <span class="comment">#关闭工程中默认的资源处理</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line">  <span class="string">throw‐exception‐if‐no‐handler‐found:</span> <span class="literal">true</span> <span class="comment">#出现错误时直接抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="代码使用">代码使用</h3><ol><li class="lvl-3"><p>添加 view 映射</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;  </span><br><span class="line">    <span class="comment">// 注意这里不要添加后缀</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-page&quot;</span>).setViewName(<span class="string">&quot;pay&quot;</span>);  </span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-error&quot;</span>).setViewName(<span class="string">&quot;pay_error&quot;</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>返回 Controller 注解不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p>返回使用 <code>forward:</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/pay-error&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="基础指令">基础指令</h2><blockquote><p>1、注释，即 <code>&lt;#‐‐和‐‐&gt;</code>，介于其之间的内容会被 freemarker 忽略<br>2、插值（Interpolation）：即 <code>$&#123;..&#125;</code> 部分，freemarker 会用真实的值代替 <code>$&#123;..&#125; </code><br>3、FTL 指令：和 HTML 标记类似，名字前加 <code>#</code> 予以区分，Freemarker 会解析标签中的表达式或逻辑。<br>4、文本，仅文本信息，这些不是 freemarker 的注释、插值、FTL 指令的内容会被 freemarker 忽略解析，直接输出内容。</p></blockquote><h3 id="List-指令">List 指令</h3><blockquote><p>说明： <code>_index</code>：得到循环的下标，使用方法是在 stu 后边加 <code>_index</code>，它的值是从 0 开始</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Map-指令">Map 指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap.stu1.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap.stu1.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">遍历输出两个学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stuMap?keys as k&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;k_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if-指令">if 指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> &lt;#<span class="attr">if</span> <span class="attr">stu.name</span> ==<span class="string">&#x27;小明&#x27;</span>&gt;</span>style=&quot;background:red;&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ol><li class="lvl-3"><p>算数运算符 FreeMarker 表达式中完全支持算术运算，FreeMarker 支持的算术运算符包括:<code>+</code>, <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code></p></li><li class="lvl-3"><p>逻辑 运算符 逻辑运算符有如下几个: 逻辑与 <code>&amp;&amp;</code> 逻辑或 <code>||</code> 逻辑非 <code>!</code> 逻辑运算符只能作用于布尔值，否则将产生错误</p></li><li class="lvl-3"><p>比较运算符 表达式中支持的比较运算符有如下几个:</p><ol><li class="lvl-7">= 或者 == 判断两个值是否相等</li><li class="lvl-7"><code>!=</code> 判断两个值是否不等</li><li class="lvl-7"><code>&gt;</code> 或者 <code>gt</code> 判断左边值是否大于右边值</li><li class="lvl-7"><code>&gt;=</code> 或者 <code>gte</code> 判断左边值是否大于等于右边值</li><li class="lvl-7"><code>&lt;</code> 或者 <code>lt</code> 判断左边值是否小于右边值</li><li class="lvl-7"><code>&lt;=</code> 或者 <code>lte</code> 判断左边值是否小于等于右边值</li></ol></li></ol><blockquote><p>注意：= 和 <code>!=</code> 可以用于字符串，数值和日期来比较是否相等，但 = 和 <code>!=</code> 两边必须是相同类型的值，否则会产生错误，而且 FreeMarker 是精确比较，“x”,&quot;x &quot;,“X” 是不等的。其它的运行符可以作用于数字和日期，但不能作用于字符串，大部分的时候,使用 <code>gt</code> 等字母运算符代替 <code>&gt;</code> 会有更好的效果,因为 FreeMarker 会把 <code>&gt;</code> 解释成 FTL 标签的结束字符,当然,也可以使用括号来避免这种情况，如：<code>&lt;#if (x&gt;y)&gt;</code></p></blockquote><h3 id="空值处理">空值处理</h3><ol><li class="lvl-3"><p>判断某变量是否存在使用 <code>??</code> 用法为：<code>variable??</code>，如果该变量存在，返回 true，否则返回 false</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>缺失变量默认值使用 <code>!</code> 使用 <code>!</code> 要以指定一个默认值，当变量为空时显示默认值。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--如果name为空显示空字符串。--&gt;</span><br><span class="line">$&#123;name!&#x27;&#x27;&#125;</span><br><span class="line">&lt;#--如果stu或bestFriend或name为空默认显示空字符串。--&gt;</span><br><span class="line">$&#123;(stu.bestFriend.name)!&#x27;&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象">内置对象</h3><p>在 freemarker 中可以访问 Request、Session 等内置对象。</p><p>Request： 用于获取 Request 对象中的 attribute 对象。</p><p>Session：用于获取 Session 对象中的 attribute 对象。</p><p>RequestParameters：用于获取 Request 对象的 parameter 参数（浏览器端发送的请求数据）</p><ol><li class="lvl-3"><p>配置</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">freemarker:</span> </span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span> <span class="comment">#把Spring的RequestContext对象暴露为变量rc </span></span><br><span class="line">    <span class="string">expose‐request‐attributes:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="string">expose‐session‐attributes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>例子在 Controller 中设置 request、session 的属性值</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试内置对象 </span></span><br><span class="line">request.setAttribute(<span class="string">&quot;attr1&quot;</span>,<span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(); </span><br><span class="line">session.setAttribute(<span class="string">&quot;session1&quot;</span>, <span class="string">&quot;user1&quot;</span>);</span><br></pre></td></tr></table></figure><p>页面获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url请求参数：$&#123;RequestParameters[&#x27;param1&#x27;]!&quot;&quot;&#125; </span><br><span class="line">request Attribute:$&#123;Request[&quot;attr1&quot;]!&quot;&quot;&#125; </span><br><span class="line">session Attribute:$&#123;Session[&quot;session1&quot;]!&quot;&quot;&#125; </span><br><span class="line">工程路径：$&#123;rc.contextPath&#125; </span><br><span class="line">请求地址: $&#123;rc.requestUri&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG">BUG</h2><h3 id="访问报错-404">访问报错 404</h3><ol><li class="lvl-3"><p>检查是否添加了 view 映射，注意不要加后缀。</p></li><li class="lvl-3"><p>检查 Controller 层使用的注解：不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p><strong>nacos 配置文件读取失败</strong>（<s>不确定原因</s>重启 nacos 后就好了）：使用 nacos 读取配置文件，出现自动装配时 suffix 没有读取到的情况。（本地配置使用.html 可以读取成功，但是放到 nacos 后，FreeMarkerProperties 中的 suffix 属性始终为默认的 <code>.ftl</code>，并且从<strong>springboot2.0</strong>开始默认的 suffix 为 <code>.ftlh</code>）</p><ul class="lvl-2"><li class="lvl-6">但是这里还是建议使用 <code>.ftl</code>，不然后序接口调用处可能会出 bug</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
Java 开发的模板引擎。官网模板：&lt;a class=&quot;link&quot;   href=&quot;https://freemarker.apache.org/docs/dgui_quickstart_basics.html&quot; &gt;Template + data-model = output - Apache FreeMarker Manual&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-23 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-26 bug记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="Freemarker" scheme="https://kiml.github.io/tags/Freemarker/"/>
    
  </entry>
  
</feed>
